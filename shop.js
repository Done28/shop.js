(function (global) {
  var process = {
    title: 'browser',
    browser: true,
    env: {},
    argv: [],
    nextTick: function (fn) {
      setTimeout(fn, 0)
    },
    cwd: function () {
      return '/'
    },
    chdir: function () {
    }
  };
  // Require module
  function require(file, cb) {
    if ({}.hasOwnProperty.call(require.cache, file))
      return require.cache[file];
    // Handle async require
    if (typeof cb == 'function') {
      require.load(file, cb);
      return
    }
    var resolved = require.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
      id: file,
      require: require,
      filename: file,
      exports: {},
      loaded: false,
      parent: null,
      children: []
    };
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    require.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return require.cache[file] = module$.exports
  }
  require.modules = {};
  require.cache = {};
  require.resolve = function (file) {
    return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0
  };
  // define normal static module
  require.define = function (file, fn) {
    require.modules[file] = fn
  };
  require.waiting = {};
  // define async module
  require.async = function (url, fn) {
    require.modules[url] = fn;
    var cb;
    while (cb = require.waiting[url].shift())
      cb(require(url))
  };
  // Load module async module
  require.load = function (url, cb) {
    var script = document.createElement('script'), existing = document.getElementsByTagName('script')[0], callbacks = require.waiting[url] = require.waiting[url] || [];
    // We'll be called when async module is defined.
    callbacks.push(cb);
    // Load module
    script.type = 'text/javascript';
    script.async = true;
    script.src = url;
    existing.parentNode.insertBefore(script, existing)
  };
  // source: node_modules/broken/lib/index.js
  require.define('broken/lib', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Promise, PromiseInspection;
    Promise = require('zousan/zousan-min');
    Promise.suppressUncaughtRejectionError = true;
    PromiseInspection = function () {
      function PromiseInspection(arg) {
        this.state = arg.state, this.value = arg.value, this.reason = arg.reason
      }
      PromiseInspection.prototype.isFulfilled = function () {
        return this.state === 'fulfilled'
      };
      PromiseInspection.prototype.isRejected = function () {
        return this.state === 'rejected'
      };
      return PromiseInspection
    }();
    Promise.reflect = function (promise) {
      return new Promise(function (resolve, reject) {
        return promise.then(function (value) {
          return resolve(new PromiseInspection({
            state: 'fulfilled',
            value: value
          }))
        })['catch'](function (err) {
          return resolve(new PromiseInspection({
            state: 'rejected',
            reason: err
          }))
        })
      })
    };
    Promise.settle = function (promises) {
      return Promise.all(promises.map(Promise.reflect))
    };
    Promise.prototype.callback = function (cb) {
      if (typeof cb === 'function') {
        this.then(function (value) {
          return cb(null, value)
        });
        this['catch'](function (error) {
          return cb(error, null)
        })
      }
      return this
    };
    module.exports = Promise  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/zousan/zousan-min.js
  require.define('zousan/zousan-min', function (module, exports, __dirname, __filename) {
    !function (t) {
      'use strict';
      function e(t) {
        if (t) {
          var e = this;
          t(function (t) {
            e.resolve(t)
          }, function (t) {
            e.reject(t)
          })
        }
      }
      function n(t, e) {
        if ('function' == typeof t.y)
          try {
            var n = t.y.call(i, e);
            t.p.resolve(n)
          } catch (o) {
            t.p.reject(o)
          }
        else
          t.p.resolve(e)
      }
      function o(t, e) {
        if ('function' == typeof t.n)
          try {
            var n = t.n.call(i, e);
            t.p.resolve(n)
          } catch (o) {
            t.p.reject(o)
          }
        else
          t.p.reject(e)
      }
      var r, i, c = 'fulfilled', u = 'rejected', s = 'undefined', f = function () {
          function t() {
            for (; e.length - n;)
              e[n](), n++, n == o && (e.splice(0, o), n = 0)
          }
          var e = [], n = 0, o = 1024, r = function () {
              if (typeof MutationObserver !== s) {
                var e = document.createElement('div'), n = new MutationObserver(t);
                return n.observe(e, { attributes: !0 }), function () {
                  e.setAttribute('a', 0)
                }
              }
              return typeof setImmediate !== s ? function () {
                setImmediate(t)
              } : function () {
                setTimeout(t, 0)
              }
            }();
          return function (t) {
            e.push(t), e.length - n == 1 && r()
          }
        }();
      e.prototype = {
        resolve: function (t) {
          if (this.state === r) {
            if (t === this)
              return this.reject(new TypeError('Attempt to resolve promise with self'));
            var e = this;
            if (t && ('function' == typeof t || 'object' == typeof t))
              try {
                var o = !0, i = t.then;
                if ('function' == typeof i)
                  return void i.call(t, function (t) {
                    o && (o = !1, e.resolve(t))
                  }, function (t) {
                    o && (o = !1, e.reject(t))
                  })
              } catch (u) {
                return void (o && this.reject(u))
              }
            this.state = c, this.v = t, e.c && f(function () {
              for (var o = 0, r = e.c.length; r > o; o++)
                n(e.c[o], t)
            })
          }
        },
        reject: function (t) {
          if (this.state === r) {
            this.state = u, this.v = t;
            var n = this.c;
            n ? f(function () {
              for (var e = 0, r = n.length; r > e; e++)
                o(n[e], t)
            }) : e.suppressUncaughtRejectionError || void 0
          }
        },
        then: function (t, i) {
          var u = new e, s = {
              y: t,
              n: i,
              p: u
            };
          if (this.state === r)
            this.c ? this.c.push(s) : this.c = [s];
          else {
            var l = this.state, a = this.v;
            f(function () {
              l === c ? n(s, a) : o(s, a)
            })
          }
          return u
        },
        'catch': function (t) {
          return this.then(null, t)
        },
        'finally': function (t) {
          return this.then(t, t)
        },
        timeout: function (t, n) {
          n = n || 'Timeout';
          var o = this;
          return new e(function (e, r) {
            setTimeout(function () {
              r(Error(n))
            }, t), o.then(function (t) {
              e(t)
            }, function (t) {
              r(t)
            })
          })
        }
      }, e.resolve = function (t) {
        var n = new e;
        return n.resolve(t), n
      }, e.reject = function (t) {
        var n = new e;
        return n.reject(t), n
      }, e.all = function (t) {
        function n(n, c) {
          'function' != typeof n.then && (n = e.resolve(n)), n.then(function (e) {
            o[c] = e, r++, r == t.length && i.resolve(o)
          }, function (t) {
            i.reject(t)
          })
        }
        for (var o = [], r = 0, i = new e, c = 0; c < t.length; c++)
          n(t[c], c);
        return t.length || i.resolve(o), i
      }, typeof module != s && module.exports && (module.exports = e), t.Zousan = e, e.soon = f
    }('undefined' != typeof global ? global : this)
  });
  // source: node_modules/referential/lib/index.js
  require.define('referential/lib', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var refer;
    refer = require('referential/lib/refer');
    refer.Ref = require('referential/lib/ref');
    module.exports = refer  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/referential/lib/refer.js
  require.define('referential/lib/refer', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Ref, refer;
    Ref = require('referential/lib/ref');
    module.exports = refer = function (state, ref) {
      var fn, i, len, method, ref1, wrapper;
      if (ref == null) {
        ref = null
      }
      if (ref == null) {
        ref = new Ref(state)
      }
      wrapper = function (key) {
        return ref.get(key)
      };
      ref1 = [
        'value',
        'get',
        'set',
        'extend',
        'index',
        'ref'
      ];
      fn = function (method) {
        return wrapper[method] = function () {
          return ref[method].apply(ref, arguments)
        }
      };
      for (i = 0, len = ref1.length; i < len; i++) {
        method = ref1[i];
        fn(method)
      }
      wrapper.refer = function (key) {
        return refer(null, ref.ref(key))
      };
      wrapper.clone = function (key) {
        return refer(null, ref.clone(key))
      };
      return wrapper
    }  //# sourceMappingURL=refer.js.map
  });
  // source: node_modules/referential/lib/ref.js
  require.define('referential/lib/ref', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Ref, extend, isArray, isNumber, isObject, isString;
    extend = require('node.extend');
    isArray = require('is-array');
    isNumber = require('is-number');
    isObject = require('referential/node_modules/is-object');
    isString = require('is-string');
    module.exports = Ref = function () {
      function Ref(_value, parent, key1) {
        this._value = _value;
        this.parent = parent;
        this.key = key1;
        this._cache = {}
      }
      Ref.prototype._mutate = function () {
        return this._cache = {}
      };
      Ref.prototype.value = function (state) {
        if (!this.parent) {
          if (state != null) {
            this._value = state
          }
          return this._value
        }
        if (state != null) {
          return this.parent.set(this.key, state)
        } else {
          return this.parent.get(this.key)
        }
      };
      Ref.prototype.ref = function (key) {
        if (!key) {
          return this
        }
        return new Ref(null, this, key)
      };
      Ref.prototype.get = function (key) {
        if (!key) {
          return this.value()
        } else {
          if (this._cache[key]) {
            return this._cache[key]
          }
          return this._cache[key] = this.index(key)
        }
      };
      Ref.prototype.set = function (key, value) {
        this._mutate();
        if (value == null) {
          this.value(extend(this.value(), key))
        } else {
          this.index(key, value)
        }
        return this
      };
      Ref.prototype.extend = function (key, value) {
        var clone;
        this._mutate();
        if (value == null) {
          this.value(extend(true, this.value(), key))
        } else {
          if (isObject(value)) {
            this.value(extend(true, this.ref(key).get(), value))
          } else {
            clone = this.clone();
            this.set(key, value);
            this.value(extend(true, clone.get(), this.value()))
          }
        }
        return this
      };
      Ref.prototype.clone = function (key) {
        return new Ref(extend(true, {}, this.get(key)))
      };
      Ref.prototype.index = function (key, value, obj, prev) {
        var next, prop, props;
        if (obj == null) {
          obj = this.value()
        }
        if (this.parent) {
          return this.parent.index(this.key + '.' + key, value)
        }
        if (isNumber(key)) {
          key = String(key)
        }
        props = key.split('.');
        if (value == null) {
          while (prop = props.shift()) {
            if (!props.length) {
              return obj != null ? obj[prop] : void 0
            }
            obj = obj != null ? obj[prop] : void 0
          }
          return
        }
        while (prop = props.shift()) {
          if (!props.length) {
            return obj[prop] = value
          } else {
            next = props[0];
            if (obj[next] == null) {
              if (isNumber(next)) {
                if (obj[prop] == null) {
                  obj[prop] = []
                }
              } else {
                if (obj[prop] == null) {
                  obj[prop] = {}
                }
              }
            }
          }
          obj = obj[prop]
        }
      };
      return Ref
    }()  //# sourceMappingURL=ref.js.map
  });
  // source: node_modules/node.extend/index.js
  require.define('node.extend', function (module, exports, __dirname, __filename) {
    module.exports = require('node.extend/lib/extend')
  });
  // source: node_modules/node.extend/lib/extend.js
  require.define('node.extend/lib/extend', function (module, exports, __dirname, __filename) {
    /*!
 * node.extend
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * @fileoverview
 * Port of jQuery.extend that actually works on node.js
 */
    var is = require('is');
    function extend() {
      var target = arguments[0] || {};
      var i = 1;
      var length = arguments.length;
      var deep = false;
      var options, name, src, copy, copy_is_array, clone;
      // Handle a deep copy situation
      if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2
      }
      // Handle case when target is a string or something (possible in deep copy)
      if (typeof target !== 'object' && !is.fn(target)) {
        target = {}
      }
      for (; i < length; i++) {
        // Only deal with non-null/undefined values
        options = arguments[i];
        if (options != null) {
          if (typeof options === 'string') {
            options = options.split('')
          }
          // Extend the base object
          for (name in options) {
            src = target[name];
            copy = options[name];
            // Prevent never-ending loop
            if (target === copy) {
              continue
            }
            // Recurse if we're merging plain objects or arrays
            if (deep && copy && (is.hash(copy) || (copy_is_array = is.array(copy)))) {
              if (copy_is_array) {
                copy_is_array = false;
                clone = src && is.array(src) ? src : []
              } else {
                clone = src && is.hash(src) ? src : {}
              }
              // Never move original objects, clone them
              target[name] = extend(deep, clone, copy)  // Don't bring in undefined values
            } else if (typeof copy !== 'undefined') {
              target[name] = copy
            }
          }
        }
      }
      // Return the modified object
      return target
    }
    ;
    /**
 * @public
 */
    extend.version = '1.1.3';
    /**
 * Exports module.
 */
    module.exports = extend
  });
  // source: node_modules/is/index.js
  require.define('is', function (module, exports, __dirname, __filename) {
    /* globals window, HTMLElement */
    /**!
 * is
 * the definitive JavaScript type testing library
 *
 * @copyright 2013-2014 Enrico Marino / Jordan Harband
 * @license MIT
 */
    var objProto = Object.prototype;
    var owns = objProto.hasOwnProperty;
    var toStr = objProto.toString;
    var symbolValueOf;
    if (typeof Symbol === 'function') {
      symbolValueOf = Symbol.prototype.valueOf
    }
    var isActualNaN = function (value) {
      return value !== value
    };
    var NON_HOST_TYPES = {
      'boolean': 1,
      number: 1,
      string: 1,
      undefined: 1
    };
    var base64Regex = /^([A-Za-z0-9+\/]{4})*([A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}==)$/;
    var hexRegex = /^[A-Fa-f0-9]+$/;
    /**
 * Expose `is`
 */
    var is = module.exports = {};
    /**
 * Test general.
 */
    /**
 * is.type
 * Test if `value` is a type of `type`.
 *
 * @param {Mixed} value value to test
 * @param {String} type type
 * @return {Boolean} true if `value` is a type of `type`, false otherwise
 * @api public
 */
    is.a = is.type = function (value, type) {
      return typeof value === type
    };
    /**
 * is.defined
 * Test if `value` is defined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is defined, false otherwise
 * @api public
 */
    is.defined = function (value) {
      return typeof value !== 'undefined'
    };
    /**
 * is.empty
 * Test if `value` is empty.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is empty, false otherwise
 * @api public
 */
    is.empty = function (value) {
      var type = toStr.call(value);
      var key;
      if (type === '[object Array]' || type === '[object Arguments]' || type === '[object String]') {
        return value.length === 0
      }
      if (type === '[object Object]') {
        for (key in value) {
          if (owns.call(value, key)) {
            return false
          }
        }
        return true
      }
      return !value
    };
    /**
 * is.equal
 * Test if `value` is equal to `other`.
 *
 * @param {Mixed} value value to test
 * @param {Mixed} other value to compare with
 * @return {Boolean} true if `value` is equal to `other`, false otherwise
 */
    is.equal = function equal(value, other) {
      if (value === other) {
        return true
      }
      var type = toStr.call(value);
      var key;
      if (type !== toStr.call(other)) {
        return false
      }
      if (type === '[object Object]') {
        for (key in value) {
          if (!is.equal(value[key], other[key]) || !(key in other)) {
            return false
          }
        }
        for (key in other) {
          if (!is.equal(value[key], other[key]) || !(key in value)) {
            return false
          }
        }
        return true
      }
      if (type === '[object Array]') {
        key = value.length;
        if (key !== other.length) {
          return false
        }
        while (--key) {
          if (!is.equal(value[key], other[key])) {
            return false
          }
        }
        return true
      }
      if (type === '[object Function]') {
        return value.prototype === other.prototype
      }
      if (type === '[object Date]') {
        return value.getTime() === other.getTime()
      }
      return false
    };
    /**
 * is.hosted
 * Test if `value` is hosted by `host`.
 *
 * @param {Mixed} value to test
 * @param {Mixed} host host to test with
 * @return {Boolean} true if `value` is hosted by `host`, false otherwise
 * @api public
 */
    is.hosted = function (value, host) {
      var type = typeof host[value];
      return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type]
    };
    /**
 * is.instance
 * Test if `value` is an instance of `constructor`.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an instance of `constructor`
 * @api public
 */
    is.instance = is['instanceof'] = function (value, constructor) {
      return value instanceof constructor
    };
    /**
 * is.nil / is.null
 * Test if `value` is null.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is null, false otherwise
 * @api public
 */
    is.nil = is['null'] = function (value) {
      return value === null
    };
    /**
 * is.undef / is.undefined
 * Test if `value` is undefined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is undefined, false otherwise
 * @api public
 */
    is.undef = is.undefined = function (value) {
      return typeof value === 'undefined'
    };
    /**
 * Test arguments.
 */
    /**
 * is.args
 * Test if `value` is an arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
    is.args = is.arguments = function (value) {
      var isStandardArguments = toStr.call(value) === '[object Arguments]';
      var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);
      return isStandardArguments || isOldArguments
    };
    /**
 * Test array.
 */
    /**
 * is.array
 * Test if 'value' is an array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an array, false otherwise
 * @api public
 */
    is.array = Array.isArray || function (value) {
      return toStr.call(value) === '[object Array]'
    };
    /**
 * is.arguments.empty
 * Test if `value` is an empty arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty arguments object, false otherwise
 * @api public
 */
    is.args.empty = function (value) {
      return is.args(value) && value.length === 0
    };
    /**
 * is.array.empty
 * Test if `value` is an empty array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty array, false otherwise
 * @api public
 */
    is.array.empty = function (value) {
      return is.array(value) && value.length === 0
    };
    /**
 * is.arraylike
 * Test if `value` is an arraylike object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
    is.arraylike = function (value) {
      return !!value && !is.bool(value) && owns.call(value, 'length') && isFinite(value.length) && is.number(value.length) && value.length >= 0
    };
    /**
 * Test boolean.
 */
    /**
 * is.bool
 * Test if `value` is a boolean.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a boolean, false otherwise
 * @api public
 */
    is.bool = is['boolean'] = function (value) {
      return toStr.call(value) === '[object Boolean]'
    };
    /**
 * is.false
 * Test if `value` is false.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is false, false otherwise
 * @api public
 */
    is['false'] = function (value) {
      return is.bool(value) && Boolean(Number(value)) === false
    };
    /**
 * is.true
 * Test if `value` is true.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is true, false otherwise
 * @api public
 */
    is['true'] = function (value) {
      return is.bool(value) && Boolean(Number(value)) === true
    };
    /**
 * Test date.
 */
    /**
 * is.date
 * Test if `value` is a date.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a date, false otherwise
 * @api public
 */
    is.date = function (value) {
      return toStr.call(value) === '[object Date]'
    };
    /**
 * Test element.
 */
    /**
 * is.element
 * Test if `value` is an html element.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an HTML Element, false otherwise
 * @api public
 */
    is.element = function (value) {
      return value !== undefined && typeof HTMLElement !== 'undefined' && value instanceof HTMLElement && value.nodeType === 1
    };
    /**
 * Test error.
 */
    /**
 * is.error
 * Test if `value` is an error object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an error object, false otherwise
 * @api public
 */
    is.error = function (value) {
      return toStr.call(value) === '[object Error]'
    };
    /**
 * Test function.
 */
    /**
 * is.fn / is.function (deprecated)
 * Test if `value` is a function.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a function, false otherwise
 * @api public
 */
    is.fn = is['function'] = function (value) {
      var isAlert = typeof window !== 'undefined' && value === window.alert;
      return isAlert || toStr.call(value) === '[object Function]'
    };
    /**
 * Test number.
 */
    /**
 * is.number
 * Test if `value` is a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a number, false otherwise
 * @api public
 */
    is.number = function (value) {
      return toStr.call(value) === '[object Number]'
    };
    /**
 * is.infinite
 * Test if `value` is positive or negative infinity.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise
 * @api public
 */
    is.infinite = function (value) {
      return value === Infinity || value === -Infinity
    };
    /**
 * is.decimal
 * Test if `value` is a decimal number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a decimal number, false otherwise
 * @api public
 */
    is.decimal = function (value) {
      return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0
    };
    /**
 * is.divisibleBy
 * Test if `value` is divisible by `n`.
 *
 * @param {Number} value value to test
 * @param {Number} n dividend
 * @return {Boolean} true if `value` is divisible by `n`, false otherwise
 * @api public
 */
    is.divisibleBy = function (value, n) {
      var isDividendInfinite = is.infinite(value);
      var isDivisorInfinite = is.infinite(n);
      var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;
      return isDividendInfinite || isDivisorInfinite || isNonZeroNumber && value % n === 0
    };
    /**
 * is.integer
 * Test if `value` is an integer.
 *
 * @param value to test
 * @return {Boolean} true if `value` is an integer, false otherwise
 * @api public
 */
    is.integer = is['int'] = function (value) {
      return is.number(value) && !isActualNaN(value) && value % 1 === 0
    };
    /**
 * is.maximum
 * Test if `value` is greater than 'others' values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is greater than `others` values
 * @api public
 */
    is.maximum = function (value, others) {
      if (isActualNaN(value)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.arraylike(others)) {
        throw new TypeError('second argument must be array-like')
      }
      var len = others.length;
      while (--len >= 0) {
        if (value < others[len]) {
          return false
        }
      }
      return true
    };
    /**
 * is.minimum
 * Test if `value` is less than `others` values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is less than `others` values
 * @api public
 */
    is.minimum = function (value, others) {
      if (isActualNaN(value)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.arraylike(others)) {
        throw new TypeError('second argument must be array-like')
      }
      var len = others.length;
      while (--len >= 0) {
        if (value > others[len]) {
          return false
        }
      }
      return true
    };
    /**
 * is.nan
 * Test if `value` is not a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is not a number, false otherwise
 * @api public
 */
    is.nan = function (value) {
      return !is.number(value) || value !== value
    };
    /**
 * is.even
 * Test if `value` is an even number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an even number, false otherwise
 * @api public
 */
    is.even = function (value) {
      return is.infinite(value) || is.number(value) && value === value && value % 2 === 0
    };
    /**
 * is.odd
 * Test if `value` is an odd number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an odd number, false otherwise
 * @api public
 */
    is.odd = function (value) {
      return is.infinite(value) || is.number(value) && value === value && value % 2 !== 0
    };
    /**
 * is.ge
 * Test if `value` is greater than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
    is.ge = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value >= other
    };
    /**
 * is.gt
 * Test if `value` is greater than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
    is.gt = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value > other
    };
    /**
 * is.le
 * Test if `value` is less than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if 'value' is less than or equal to 'other'
 * @api public
 */
    is.le = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value <= other
    };
    /**
 * is.lt
 * Test if `value` is less than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if `value` is less than `other`
 * @api public
 */
    is.lt = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value < other
    };
    /**
 * is.within
 * Test if `value` is within `start` and `finish`.
 *
 * @param {Number} value value to test
 * @param {Number} start lower bound
 * @param {Number} finish upper bound
 * @return {Boolean} true if 'value' is is within 'start' and 'finish'
 * @api public
 */
    is.within = function (value, start, finish) {
      if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {
        throw new TypeError('all arguments must be numbers')
      }
      var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);
      return isAnyInfinite || value >= start && value <= finish
    };
    /**
 * Test object.
 */
    /**
 * is.object
 * Test if `value` is an object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an object, false otherwise
 * @api public
 */
    is.object = function (value) {
      return toStr.call(value) === '[object Object]'
    };
    /**
 * is.hash
 * Test if `value` is a hash - a plain object literal.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a hash, false otherwise
 * @api public
 */
    is.hash = function (value) {
      return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval
    };
    /**
 * Test regexp.
 */
    /**
 * is.regexp
 * Test if `value` is a regular expression.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a regexp, false otherwise
 * @api public
 */
    is.regexp = function (value) {
      return toStr.call(value) === '[object RegExp]'
    };
    /**
 * Test string.
 */
    /**
 * is.string
 * Test if `value` is a string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a string, false otherwise
 * @api public
 */
    is.string = function (value) {
      return toStr.call(value) === '[object String]'
    };
    /**
 * Test base64 string.
 */
    /**
 * is.base64
 * Test if `value` is a valid base64 encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise
 * @api public
 */
    is.base64 = function (value) {
      return is.string(value) && (!value.length || base64Regex.test(value))
    };
    /**
 * Test base64 string.
 */
    /**
 * is.hex
 * Test if `value` is a valid hex encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a hex encoded string, false otherwise
 * @api public
 */
    is.hex = function (value) {
      return is.string(value) && (!value.length || hexRegex.test(value))
    };
    /**
 * is.symbol
 * Test if `value` is an ES6 Symbol
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a Symbol, false otherise
 * @api public
 */
    is.symbol = function (value) {
      return typeof Symbol === 'function' && toStr.call(value) === '[object Symbol]' && typeof symbolValueOf.call(value) === 'symbol'
    }
  });
  // source: node_modules/is-array/index.js
  require.define('is-array', function (module, exports, __dirname, __filename) {
    /**
 * isArray
 */
    var isArray = Array.isArray;
    /**
 * toString
 */
    var str = Object.prototype.toString;
    /**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */
    module.exports = isArray || function (val) {
      return !!val && '[object Array]' == str.call(val)
    }
  });
  // source: node_modules/is-number/index.js
  require.define('is-number', function (module, exports, __dirname, __filename) {
    /*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */
    'use strict';
    var typeOf = require('kind-of');
    module.exports = function isNumber(num) {
      var type = typeOf(num);
      if (type !== 'number' && type !== 'string') {
        return false
      }
      var n = +num;
      return n - n + 1 >= 0 && num !== ''
    }
  });
  // source: node_modules/kind-of/index.js
  require.define('kind-of', function (module, exports, __dirname, __filename) {
    var isBuffer = require('is-buffer');
    var toString = Object.prototype.toString;
    /**
 * Get the native `typeof` a value.
 *
 * @param  {*} `val`
 * @return {*} Native javascript type
 */
    module.exports = function kindOf(val) {
      // primitivies
      if (typeof val === 'undefined') {
        return 'undefined'
      }
      if (val === null) {
        return 'null'
      }
      if (val === true || val === false || val instanceof Boolean) {
        return 'boolean'
      }
      if (typeof val === 'string' || val instanceof String) {
        return 'string'
      }
      if (typeof val === 'number' || val instanceof Number) {
        return 'number'
      }
      // functions
      if (typeof val === 'function' || val instanceof Function) {
        return 'function'
      }
      // array
      if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
        return 'array'
      }
      // check for instances of RegExp and Date before calling `toString`
      if (val instanceof RegExp) {
        return 'regexp'
      }
      if (val instanceof Date) {
        return 'date'
      }
      // other objects
      var type = toString.call(val);
      if (type === '[object RegExp]') {
        return 'regexp'
      }
      if (type === '[object Date]') {
        return 'date'
      }
      if (type === '[object Arguments]') {
        return 'arguments'
      }
      // buffer
      if (typeof Buffer !== 'undefined' && isBuffer(val)) {
        return 'buffer'
      }
      // es6: Map, WeakMap, Set, WeakSet
      if (type === '[object Set]') {
        return 'set'
      }
      if (type === '[object WeakSet]') {
        return 'weakset'
      }
      if (type === '[object Map]') {
        return 'map'
      }
      if (type === '[object WeakMap]') {
        return 'weakmap'
      }
      if (type === '[object Symbol]') {
        return 'symbol'
      }
      // typed arrays
      if (type === '[object Int8Array]') {
        return 'int8array'
      }
      if (type === '[object Uint8Array]') {
        return 'uint8array'
      }
      if (type === '[object Uint8ClampedArray]') {
        return 'uint8clampedarray'
      }
      if (type === '[object Int16Array]') {
        return 'int16array'
      }
      if (type === '[object Uint16Array]') {
        return 'uint16array'
      }
      if (type === '[object Int32Array]') {
        return 'int32array'
      }
      if (type === '[object Uint32Array]') {
        return 'uint32array'
      }
      if (type === '[object Float32Array]') {
        return 'float32array'
      }
      if (type === '[object Float64Array]') {
        return 'float64array'
      }
      // must be a plain object
      return 'object'
    }
  });
  // source: node_modules/is-buffer/index.js
  require.define('is-buffer', function (module, exports, __dirname, __filename) {
    /**
 * Determine if an object is Buffer
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install is-buffer`
 */
    module.exports = function (obj) {
      return !!(obj != null && (obj._isBuffer || obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)))
    }
  });
  // source: node_modules/referential/node_modules/is-object/index.js
  require.define('referential/node_modules/is-object', function (module, exports, __dirname, __filename) {
    'use strict';
    module.exports = function isObject(x) {
      return typeof x === 'object' && x !== null
    }
  });
  // source: node_modules/is-string/index.js
  require.define('is-string', function (module, exports, __dirname, __filename) {
    'use strict';
    var strValue = String.prototype.valueOf;
    var tryStringObject = function tryStringObject(value) {
      try {
        strValue.call(value);
        return true
      } catch (e) {
        return false
      }
    };
    var toStr = Object.prototype.toString;
    var strClass = '[object String]';
    var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
    module.exports = function isString(value) {
      if (typeof value === 'string') {
        return true
      }
      if (typeof value !== 'object') {
        return false
      }
      return hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass
    }
  });
  // source: node_modules/riot/riot.js
  require.define('riot/riot', function (module, exports, __dirname, __filename) {
    /* Riot v2.2.4, @license MIT, (c) 2015 Muut Inc. + contributors */
    ;
    (function (window, undefined) {
      'use strict';
      var riot = {
          version: 'v2.2.4',
          settings: {}
        },
        //// be aware, internal usage
        // counter to give a unique id to all the Tag instances
        __uid = 0,
        // riot specific prefixes
        RIOT_PREFIX = 'riot-', RIOT_TAG = RIOT_PREFIX + 'tag',
        // for typeof == '' comparisons
        T_STRING = 'string', T_OBJECT = 'object', T_UNDEF = 'undefined', T_FUNCTION = 'function',
        // special native tags that cannot be treated like the others
        SPECIAL_TAGS_REGEX = /^(?:opt(ion|group)|tbody|col|t[rhd])$/, RESERVED_WORDS_BLACKLIST = [
          '_item',
          '_id',
          'update',
          'root',
          'mount',
          'unmount',
          'mixin',
          'isMounted',
          'isLoop',
          'tags',
          'parent',
          'opts',
          'trigger',
          'on',
          'off',
          'one'
        ],
        // version# for IE 8-11, 0 for others
        IE_VERSION = (window && window.document || {}).documentMode | 0,
        // Array.isArray for IE8 is in the polyfills
        isArray = Array.isArray;
      riot.observable = function (el) {
        el = el || {};
        var callbacks = {}, _id = 0;
        el.on = function (events, fn) {
          if (isFunction(fn)) {
            if (typeof fn.id === T_UNDEF)
              fn._id = _id++;
            events.replace(/\S+/g, function (name, pos) {
              (callbacks[name] = callbacks[name] || []).push(fn);
              fn.typed = pos > 0
            })
          }
          return el
        };
        el.off = function (events, fn) {
          if (events == '*')
            callbacks = {};
          else {
            events.replace(/\S+/g, function (name) {
              if (fn) {
                var arr = callbacks[name];
                for (var i = 0, cb; cb = arr && arr[i]; ++i) {
                  if (cb._id == fn._id)
                    arr.splice(i--, 1)
                }
              } else {
                callbacks[name] = []
              }
            })
          }
          return el
        };
        // only single event supported
        el.one = function (name, fn) {
          function on() {
            el.off(name, on);
            fn.apply(el, arguments)
          }
          return el.on(name, on)
        };
        el.trigger = function (name) {
          var args = [].slice.call(arguments, 1), fns = callbacks[name] || [];
          for (var i = 0, fn; fn = fns[i]; ++i) {
            if (!fn.busy) {
              fn.busy = 1;
              fn.apply(el, fn.typed ? [name].concat(args) : args);
              if (fns[i] !== fn) {
                i--
              }
              fn.busy = 0
            }
          }
          if (callbacks.all && name != 'all') {
            el.trigger.apply(el, [
              'all',
              name
            ].concat(args))
          }
          return el
        };
        return el
      };
      riot.mixin = function () {
        var mixins = {};
        return function (name, mixin) {
          if (!mixin)
            return mixins[name];
          mixins[name] = mixin
        }
      }();
      (function (riot, evt, win) {
        // browsers only
        if (!win)
          return;
        var loc = win.location, fns = riot.observable(), started = false, current;
        function hash() {
          return loc.href.split('#')[1] || ''  // why not loc.hash.splice(1) ?
        }
        function parser(path) {
          return path.split('/')
        }
        function emit(path) {
          if (path.type)
            path = hash();
          if (path != current) {
            fns.trigger.apply(null, ['H'].concat(parser(path)));
            current = path
          }
        }
        var r = riot.route = function (arg) {
          // string
          if (arg[0]) {
            loc.hash = arg;
            emit(arg)  // function
          } else {
            fns.on('H', arg)
          }
        };
        r.exec = function (fn) {
          fn.apply(null, parser(hash()))
        };
        r.parser = function (fn) {
          parser = fn
        };
        r.stop = function () {
          if (started) {
            if (win.removeEventListener)
              win.removeEventListener(evt, emit, false)  //@IE8 - the if()
;
            else
              win.detachEvent('on' + evt, emit);
            //@IE8
            fns.off('*');
            started = false
          }
        };
        r.start = function () {
          if (!started) {
            if (win.addEventListener)
              win.addEventListener(evt, emit, false)  //@IE8 - the if()
;
            else
              win.attachEvent('on' + evt, emit);
            //IE8
            started = true
          }
        };
        // autostart the router
        r.start()
      }(riot, 'hashchange', window));
      /*

//// How it works?


Three ways:

1. Expressions: tmpl('{ value }', data).
   Returns the result of evaluated expression as a raw object.

2. Templates: tmpl('Hi { name } { surname }', data).
   Returns a string with evaluated expressions.

3. Filters: tmpl('{ show: !done, highlight: active }', data).
   Returns a space separated list of trueish keys (mainly
   used for setting html classes), e.g. "show highlight".


// Template examples

tmpl('{ title || "Untitled" }', data)
tmpl('Results are { results ? "ready" : "loading" }', data)
tmpl('Today is { new Date() }', data)
tmpl('{ message.length > 140 && "Message is too long" }', data)
tmpl('This item got { Math.round(rating) } stars', data)
tmpl('<h1>{ title }</h1>{ body }', data)


// Falsy expressions in templates

In templates (as opposed to single expressions) all falsy values
except zero (undefined/null/false) will default to empty string:

tmpl('{ undefined } - { false } - { null } - { 0 }', {})
// will return: " - - - 0"

*/
      var brackets = function (orig) {
        var cachedBrackets, r, b, re = /[{}]/g;
        return function (x) {
          // make sure we use the current setting
          var s = riot.settings.brackets || orig;
          // recreate cached vars if needed
          if (cachedBrackets !== s) {
            cachedBrackets = s;
            b = s.split(' ');
            r = b.map(function (e) {
              return e.replace(/(?=.)/g, '\\')
            })
          }
          // if regexp given, rewrite it with current brackets (only if differ from default)
          return x instanceof RegExp ? s === orig ? x : new RegExp(x.source.replace(re, function (b) {
            return r[~~(b === '}')]
          }), x.global ? 'g' : '') : // else, get specific bracket
          b[x]
        }
      }('{ }');
      var tmpl = function () {
        var cache = {}, OGLOB = '"in d?d:' + (window ? 'window).' : 'global).'), reVars = /(['"\/])(?:[^\\]*?|\\.|.)*?\1|\.\w*|\w*:|\b(?:(?:new|typeof|in|instanceof) |(?:this|true|false|null|undefined)\b|function\s*\()|([A-Za-z_$]\w*)/g;
        // build a template (or get it from cache), render with data
        return function (str, data) {
          return str && (cache[str] || (cache[str] = tmpl(str)))(data)
        };
        // create a template instance
        function tmpl(s, p) {
          if (s.indexOf(brackets(0)) < 0) {
            // return raw text
            s = s.replace(/\n|\r\n?/g, '\n');
            return function () {
              return s
            }
          }
          // temporarily convert \{ and \} to a non-character
          s = s.replace(brackets(/\\{/g), '￰').replace(brackets(/\\}/g), '￱');
          // split string to expression and non-expresion parts
          p = split(s, extract(s, brackets(/{/), brackets(/}/)));
          // is it a single expression or a template? i.e. {x} or <b>{x}</b>
          s = p.length === 2 && !p[0] ? // if expression, evaluate it
          expr(p[1]) : // if template, evaluate all expressions in it
          '[' + p.map(function (s, i) {
            // is it an expression or a string (every second part is an expression)
            return i % 2 ? // evaluate the expressions
            expr(s, true) : // process string parts of the template:
            '"' + s  // preserve new lines
.replace(/\n|\r\n?/g, '\\n')  // escape quotes
.replace(/"/g, '\\"') + '"'
          }).join(',') + '].join("")';
          return new Function('d', 'return ' + s  // bring escaped { and } back
.replace(/\uFFF0/g, brackets(0)).replace(/\uFFF1/g, brackets(1)) + ';')
        }
        // parse { ... } expression
        function expr(s, n) {
          s = s  // convert new lines to spaces
.replace(/\n|\r\n?/g, ' ')  // trim whitespace, brackets, strip comments
.replace(brackets(/^[{ ]+|[ }]+$|\/\*.+?\*\//g), '');
          // is it an object literal? i.e. { key : value }
          return /^\s*[\w- "']+ *:/.test(s) ? // if object literal, return trueish keys
          // e.g.: { show: isOpen(), done: item.done } -> "show done"
          '[' + // extract key:val pairs, ignoring any nested objects
          extract(s, // name part: name:, "name":, 'name':, name :
          /["' ]*[\w- ]+["' ]*:/, // expression part: everything upto a comma followed by a name (see above) or end of line
          /,(?=["' ]*[\w- ]+["' ]*:)|}|$/).map(function (pair) {
            // get key, val parts
            return pair.replace(/^[ "']*(.+?)[ "']*: *(.+?),? *$/, function (_, k, v) {
              // wrap all conditional parts to ignore errors
              return v.replace(/[^&|=!><]+/g, wrap) + '?"' + k + '":"",'
            })
          }).join('') + '].join(" ").trim()' : // if js expression, evaluate as javascript
          wrap(s, n)
        }
        // execute js w/o breaking on errors or undefined vars
        function wrap(s, nonull) {
          s = s.trim();
          return !s ? '' : '(function(v){try{v=' + // prefix vars (name => data.name)
          s.replace(reVars, function (s, _, v) {
            return v ? '(("' + v + OGLOB + v + ')' : s
          }) + // default to empty string for falsy values except zero
          '}catch(e){}return ' + (nonull === true ? '!v&&v!==0?"":v' : 'v') + '}).call(d)'
        }
        // split string by an array of substrings
        function split(str, substrings) {
          var parts = [];
          substrings.map(function (sub, i) {
            // push matched expression and part before it
            i = str.indexOf(sub);
            parts.push(str.slice(0, i), sub);
            str = str.slice(i + sub.length)
          });
          if (str)
            parts.push(str);
          // push the remaining part
          return parts
        }
        // match strings between opening and closing regexp, skipping any inner/nested matches
        function extract(str, open, close) {
          var start, level = 0, matches = [], re = new RegExp('(' + open.source + ')|(' + close.source + ')', 'g');
          str.replace(re, function (_, open, close, pos) {
            // if outer inner bracket, mark position
            if (!level && open)
              start = pos;
            // in(de)crease bracket level
            level += open ? 1 : -1;
            // if outer closing bracket, grab the match
            if (!level && close != null)
              matches.push(str.slice(start, pos + close.length))
          });
          return matches
        }
      }();
      /*
  lib/browser/tag/mkdom.js

  Includes hacks needed for the Internet Explorer version 9 and bellow

*/
      // http://kangax.github.io/compat-table/es5/#ie8
      // http://codeplanet.io/dropping-ie8/
      var mkdom = function (checkIE) {
        var rootEls = {
            'tr': 'tbody',
            'th': 'tr',
            'td': 'tr',
            'tbody': 'table',
            'col': 'colgroup'
          }, GENERIC = 'div';
        checkIE = checkIE && checkIE < 10;
        // creates any dom element in a div, table, or colgroup container
        function _mkdom(html) {
          var match = html && html.match(/^\s*<([-\w]+)/), tagName = match && match[1].toLowerCase(), rootTag = rootEls[tagName] || GENERIC, el = mkEl(rootTag);
          el.stub = true;
          if (checkIE && tagName && (match = tagName.match(SPECIAL_TAGS_REGEX)))
            ie9elem(el, html, tagName, !!match[1]);
          else
            el.innerHTML = html;
          return el
        }
        // creates tr, th, td, option, optgroup element for IE8-9
        /* istanbul ignore next */
        function ie9elem(el, html, tagName, select) {
          var div = mkEl(GENERIC), tag = select ? 'select>' : 'table>', child;
          div.innerHTML = '<' + tag + html + '</' + tag;
          child = div.getElementsByTagName(tagName)[0];
          if (child)
            el.appendChild(child)
        }
        // end ie9elem()
        return _mkdom
      }(IE_VERSION);
      // { key, i in items} -> { key, i, items }
      function loopKeys(expr) {
        var b0 = brackets(0), els = expr.trim().slice(b0.length).match(/^\s*(\S+?)\s*(?:,\s*(\S+))?\s+in\s+(.+)$/);
        return els ? {
          key: els[1],
          pos: els[2],
          val: b0 + els[3]
        } : { val: expr }
      }
      function mkitem(expr, key, val) {
        var item = {};
        item[expr.key] = key;
        if (expr.pos)
          item[expr.pos] = val;
        return item
      }
      /* Beware: heavy stuff */
      function _each(dom, parent, expr) {
        remAttr(dom, 'each');
        var tagName = getTagName(dom), template = dom.outerHTML, hasImpl = !!tagImpl[tagName], impl = tagImpl[tagName] || { tmpl: template }, root = dom.parentNode, placeholder = document.createComment('riot placeholder'), tags = [], child = getTag(dom), checksum;
        root.insertBefore(placeholder, dom);
        expr = loopKeys(expr);
        // clean template code
        parent.one('premount', function () {
          if (root.stub)
            root = parent.root;
          // remove the original DOM node
          dom.parentNode.removeChild(dom)
        }).on('update', function () {
          var items = tmpl(expr.val, parent);
          // object loop. any changes cause full redraw
          if (!isArray(items)) {
            checksum = items ? JSON.stringify(items) : '';
            items = !items ? [] : Object.keys(items).map(function (key) {
              return mkitem(expr, key, items[key])
            })
          }
          var frag = document.createDocumentFragment(), i = tags.length, j = items.length;
          // unmount leftover items
          while (i > j) {
            tags[--i].unmount();
            tags.splice(i, 1)
          }
          for (i = 0; i < j; ++i) {
            var _item = !checksum && !!expr.key ? mkitem(expr, items[i], i) : items[i];
            if (!tags[i]) {
              // mount new
              (tags[i] = new Tag(impl, {
                parent: parent,
                isLoop: true,
                hasImpl: hasImpl,
                root: SPECIAL_TAGS_REGEX.test(tagName) ? root : dom.cloneNode(),
                item: _item
              }, dom.innerHTML)).mount();
              frag.appendChild(tags[i].root)
            } else
              tags[i].update(_item);
            tags[i]._item = _item
          }
          root.insertBefore(frag, placeholder);
          if (child)
            parent.tags[tagName] = tags
        }).one('updated', function () {
          var keys = Object.keys(parent);
          // only set new values
          walk(root, function (node) {
            // only set element node and not isLoop
            if (node.nodeType == 1 && !node.isLoop && !node._looped) {
              node._visited = false;
              // reset _visited for loop node
              node._looped = true;
              // avoid set multiple each
              setNamed(node, parent, keys)
            }
          })
        })
      }
      function parseNamedElements(root, tag, childTags) {
        walk(root, function (dom) {
          if (dom.nodeType == 1) {
            dom.isLoop = dom.isLoop || (dom.parentNode && dom.parentNode.isLoop || dom.getAttribute('each')) ? 1 : 0;
            // custom child tag
            var child = getTag(dom);
            if (child && !dom.isLoop) {
              childTags.push(initChildTag(child, dom, tag))
            }
            if (!dom.isLoop)
              setNamed(dom, tag, [])
          }
        })
      }
      function parseExpressions(root, tag, expressions) {
        function addExpr(dom, val, extra) {
          if (val.indexOf(brackets(0)) >= 0) {
            var expr = {
              dom: dom,
              expr: val
            };
            expressions.push(extend(expr, extra))
          }
        }
        walk(root, function (dom) {
          var type = dom.nodeType;
          // text node
          if (type == 3 && dom.parentNode.tagName != 'STYLE')
            addExpr(dom, dom.nodeValue);
          if (type != 1)
            return;
          /* element */
          // loop
          var attr = dom.getAttribute('each');
          if (attr) {
            _each(dom, tag, attr);
            return false
          }
          // attribute expressions
          each(dom.attributes, function (attr) {
            var name = attr.name, bool = name.split('__')[1];
            addExpr(dom, attr.value, {
              attr: bool || name,
              bool: bool
            });
            if (bool) {
              remAttr(dom, name);
              return false
            }
          });
          // skip custom tags
          if (getTag(dom))
            return false
        })
      }
      function Tag(impl, conf, innerHTML) {
        var self = riot.observable(this), opts = inherit(conf.opts) || {}, dom = mkdom(impl.tmpl), parent = conf.parent, isLoop = conf.isLoop, hasImpl = conf.hasImpl, item = cleanUpData(conf.item), expressions = [], childTags = [], root = conf.root, fn = impl.fn, tagName = root.tagName.toLowerCase(), attr = {}, propsInSyncWithParent = [];
        if (fn && root._tag) {
          root._tag.unmount(true)
        }
        // not yet mounted
        this.isMounted = false;
        root.isLoop = isLoop;
        // keep a reference to the tag just created
        // so we will be able to mount this tag multiple times
        root._tag = this;
        // create a unique id to this tag
        // it could be handy to use it also to improve the virtual dom rendering speed
        this._id = __uid++;
        extend(this, {
          parent: parent,
          root: root,
          opts: opts,
          tags: {}
        }, item);
        // grab attributes
        each(root.attributes, function (el) {
          var val = el.value;
          // remember attributes with expressions only
          if (brackets(/{.*}/).test(val))
            attr[el.name] = val
        });
        if (dom.innerHTML && !/^(select|optgroup|table|tbody|tr|col(?:group)?)$/.test(tagName))
          // replace all the yield tags with the tag inner html
          dom.innerHTML = replaceYield(dom.innerHTML, innerHTML);
        // options
        function updateOpts() {
          var ctx = hasImpl && isLoop ? self : parent || self;
          // update opts from current DOM attributes
          each(root.attributes, function (el) {
            opts[el.name] = tmpl(el.value, ctx)
          });
          // recover those with expressions
          each(Object.keys(attr), function (name) {
            opts[name] = tmpl(attr[name], ctx)
          })
        }
        function normalizeData(data) {
          for (var key in item) {
            if (typeof self[key] !== T_UNDEF)
              self[key] = data[key]
          }
        }
        function inheritFromParent() {
          if (!self.parent || !isLoop)
            return;
          each(Object.keys(self.parent), function (k) {
            // some properties must be always in sync with the parent tag
            var mustSync = !~RESERVED_WORDS_BLACKLIST.indexOf(k) && ~propsInSyncWithParent.indexOf(k);
            if (typeof self[k] === T_UNDEF || mustSync) {
              // track the property to keep in sync
              // so we can keep it updated
              if (!mustSync)
                propsInSyncWithParent.push(k);
              self[k] = self.parent[k]
            }
          })
        }
        this.update = function (data) {
          // make sure the data passed will not override
          // the component core methods
          data = cleanUpData(data);
          // inherit properties from the parent
          inheritFromParent();
          // normalize the tag properties in case an item object was initially passed
          if (data && typeof item === T_OBJECT) {
            normalizeData(data);
            item = data
          }
          extend(self, data);
          updateOpts();
          self.trigger('update', data);
          update(expressions, self);
          self.trigger('updated')
        };
        this.mixin = function () {
          each(arguments, function (mix) {
            mix = typeof mix === T_STRING ? riot.mixin(mix) : mix;
            each(Object.keys(mix), function (key) {
              // bind methods to self
              if (key != 'init')
                self[key] = isFunction(mix[key]) ? mix[key].bind(self) : mix[key]
            });
            // init method will be called automatically
            if (mix.init)
              mix.init.bind(self)()
          })
        };
        this.mount = function () {
          updateOpts();
          // initialiation
          if (fn)
            fn.call(self, opts);
          // parse layout after init. fn may calculate args for nested custom tags
          parseExpressions(dom, self, expressions);
          // mount the child tags
          toggle(true);
          // update the root adding custom attributes coming from the compiler
          // it fixes also #1087
          if (impl.attrs || hasImpl) {
            walkAttributes(impl.attrs, function (k, v) {
              root.setAttribute(k, v)
            });
            parseExpressions(self.root, self, expressions)
          }
          if (!self.parent || isLoop)
            self.update(item);
          // internal use only, fixes #403
          self.trigger('premount');
          if (isLoop && !hasImpl) {
            // update the root attribute for the looped elements
            self.root = root = dom.firstChild
          } else {
            while (dom.firstChild)
              root.appendChild(dom.firstChild);
            if (root.stub)
              self.root = root = parent.root
          }
          // if it's not a child tag we can trigger its mount event
          if (!self.parent || self.parent.isMounted) {
            self.isMounted = true;
            self.trigger('mount')
          }  // otherwise we need to wait that the parent event gets triggered
          else
            self.parent.one('mount', function () {
              // avoid to trigger the `mount` event for the tags
              // not visible included in an if statement
              if (!isInStub(self.root)) {
                self.parent.isMounted = self.isMounted = true;
                self.trigger('mount')
              }
            })
        };
        this.unmount = function (keepRootTag) {
          var el = root, p = el.parentNode, ptag;
          if (p) {
            if (parent) {
              ptag = getImmediateCustomParentTag(parent);
              // remove this tag from the parent tags object
              // if there are multiple nested tags with same name..
              // remove this element form the array
              if (isArray(ptag.tags[tagName]))
                each(ptag.tags[tagName], function (tag, i) {
                  if (tag._id == self._id)
                    ptag.tags[tagName].splice(i, 1)
                });
              else
                // otherwise just delete the tag instance
                ptag.tags[tagName] = undefined
            } else
              while (el.firstChild)
                el.removeChild(el.firstChild);
            if (!keepRootTag)
              p.removeChild(el);
            else
              // the riot-tag attribute isn't needed anymore, remove it
              p.removeAttribute('riot-tag')
          }
          self.trigger('unmount');
          toggle();
          self.off('*');
          // somehow ie8 does not like `delete root._tag`
          root._tag = null
        };
        function toggle(isMount) {
          // mount/unmount children
          each(childTags, function (child) {
            child[isMount ? 'mount' : 'unmount']()
          });
          // listen/unlisten parent (events flow one way from parent to children)
          if (parent) {
            var evt = isMount ? 'on' : 'off';
            // the loop tags will be always in sync with the parent automatically
            if (isLoop)
              parent[evt]('unmount', self.unmount);
            else
              parent[evt]('update', self.update)[evt]('unmount', self.unmount)
          }
        }
        // named elements available for fn
        parseNamedElements(dom, this, childTags)
      }
      function setEventHandler(name, handler, dom, tag) {
        dom[name] = function (e) {
          var item = tag._item, ptag = tag.parent, el;
          if (!item)
            while (ptag && !item) {
              item = ptag._item;
              ptag = ptag.parent
            }
          // cross browser event fix
          e = e || window.event;
          // ignore error on some browsers
          try {
            e.currentTarget = dom;
            if (!e.target)
              e.target = e.srcElement;
            if (!e.which)
              e.which = e.charCode || e.keyCode
          } catch (ignored) {
          }
          e.item = item;
          // prevent default behaviour (by default)
          if (handler.call(tag, e) !== true && !/radio|check/.test(dom.type)) {
            if (e.preventDefault)
              e.preventDefault();
            e.returnValue = false
          }
          if (!e.preventUpdate) {
            el = item ? getImmediateCustomParentTag(ptag) : tag;
            el.update()
          }
        }
      }
      // used by if- attribute
      function insertTo(root, node, before) {
        if (root) {
          root.insertBefore(before, node);
          root.removeChild(node)
        }
      }
      function update(expressions, tag) {
        each(expressions, function (expr, i) {
          var dom = expr.dom, attrName = expr.attr, value = tmpl(expr.expr, tag), parent = expr.dom.parentNode;
          if (expr.bool)
            value = value ? attrName : false;
          else if (value == null)
            value = '';
          // leave out riot- prefixes from strings inside textarea
          // fix #815: any value -> string
          if (parent && parent.tagName == 'TEXTAREA')
            value = ('' + value).replace(/riot-/g, '');
          // no change
          if (expr.value === value)
            return;
          expr.value = value;
          // text node
          if (!attrName) {
            dom.nodeValue = '' + value;
            // #815 related
            return
          }
          // remove original attribute
          remAttr(dom, attrName);
          // event handler
          if (isFunction(value)) {
            setEventHandler(attrName, value, dom, tag)  // if- conditional
          } else if (attrName == 'if') {
            var stub = expr.stub, add = function () {
                insertTo(stub.parentNode, stub, dom)
              }, remove = function () {
                insertTo(dom.parentNode, dom, stub)
              };
            // add to DOM
            if (value) {
              if (stub) {
                add();
                dom.inStub = false;
                // avoid to trigger the mount event if the tags is not visible yet
                // maybe we can optimize this avoiding to mount the tag at all
                if (!isInStub(dom)) {
                  walk(dom, function (el) {
                    if (el._tag && !el._tag.isMounted)
                      el._tag.isMounted = !!el._tag.trigger('mount')
                  })
                }
              }  // remove from DOM
            } else {
              stub = expr.stub = stub || document.createTextNode('');
              // if the parentNode is defined we can easily replace the tag
              if (dom.parentNode)
                remove();
              else
                // otherwise we need to wait the updated event
                (tag.parent || tag).one('updated', remove);
              dom.inStub = true
            }  // show / hide
          } else if (/^(show|hide)$/.test(attrName)) {
            if (attrName == 'hide')
              value = !value;
            dom.style.display = value ? '' : 'none'  // field value
          } else if (attrName == 'value') {
            dom.value = value  // <img src="{ expr }">
          } else if (startsWith(attrName, RIOT_PREFIX) && attrName != RIOT_TAG) {
            if (value)
              dom.setAttribute(attrName.slice(RIOT_PREFIX.length), value)
          } else {
            if (expr.bool) {
              dom[attrName] = value;
              if (!value)
                return
            }
            if (typeof value !== T_OBJECT)
              dom.setAttribute(attrName, value)
          }
        })
      }
      function each(els, fn) {
        for (var i = 0, len = (els || []).length, el; i < len; i++) {
          el = els[i];
          // return false -> remove current item during loop
          if (el != null && fn(el, i) === false)
            i--
        }
        return els
      }
      function isFunction(v) {
        return typeof v === T_FUNCTION || false  // avoid IE problems
      }
      function remAttr(dom, name) {
        dom.removeAttribute(name)
      }
      function getTag(dom) {
        return dom.tagName && tagImpl[dom.getAttribute(RIOT_TAG) || dom.tagName.toLowerCase()]
      }
      function initChildTag(child, dom, parent) {
        var tag = new Tag(child, {
            root: dom,
            parent: parent
          }, dom.innerHTML), tagName = getTagName(dom), ptag = getImmediateCustomParentTag(parent), cachedTag;
        // fix for the parent attribute in the looped elements
        tag.parent = ptag;
        cachedTag = ptag.tags[tagName];
        // if there are multiple children tags having the same name
        if (cachedTag) {
          // if the parent tags property is not yet an array
          // create it adding the first cached tag
          if (!isArray(cachedTag))
            ptag.tags[tagName] = [cachedTag];
          // add the new nested tag to the array
          if (!~ptag.tags[tagName].indexOf(tag))
            ptag.tags[tagName].push(tag)
        } else {
          ptag.tags[tagName] = tag
        }
        // empty the child node once we got its template
        // to avoid that its children get compiled multiple times
        dom.innerHTML = '';
        return tag
      }
      function getImmediateCustomParentTag(tag) {
        var ptag = tag;
        while (!getTag(ptag.root)) {
          if (!ptag.parent)
            break;
          ptag = ptag.parent
        }
        return ptag
      }
      function getTagName(dom) {
        var child = getTag(dom), namedTag = dom.getAttribute('name'), tagName = namedTag && namedTag.indexOf(brackets(0)) < 0 ? namedTag : child ? child.name : dom.tagName.toLowerCase();
        return tagName
      }
      function extend(src) {
        var obj, args = arguments;
        for (var i = 1; i < args.length; ++i) {
          if (obj = args[i]) {
            for (var key in obj) {
              // eslint-disable-line guard-for-in
              src[key] = obj[key]
            }
          }
        }
        return src
      }
      // with this function we avoid that the current Tag methods get overridden
      function cleanUpData(data) {
        if (!(data instanceof Tag) && !(data && typeof data.trigger == T_FUNCTION))
          return data;
        var o = {};
        for (var key in data) {
          if (!~RESERVED_WORDS_BLACKLIST.indexOf(key))
            o[key] = data[key]
        }
        return o
      }
      function walk(dom, fn) {
        if (dom) {
          if (fn(dom) === false)
            return;
          else {
            dom = dom.firstChild;
            while (dom) {
              walk(dom, fn);
              dom = dom.nextSibling
            }
          }
        }
      }
      // minimize risk: only zero or one _space_ between attr & value
      function walkAttributes(html, fn) {
        var m, re = /([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g;
        while (m = re.exec(html)) {
          fn(m[1].toLowerCase(), m[2] || m[3] || m[4])
        }
      }
      function isInStub(dom) {
        while (dom) {
          if (dom.inStub)
            return true;
          dom = dom.parentNode
        }
        return false
      }
      function mkEl(name) {
        return document.createElement(name)
      }
      function replaceYield(tmpl, innerHTML) {
        return tmpl.replace(/<(yield)\/?>(<\/\1>)?/gi, innerHTML || '')
      }
      function $$(selector, ctx) {
        return (ctx || document).querySelectorAll(selector)
      }
      function $(selector, ctx) {
        return (ctx || document).querySelector(selector)
      }
      function inherit(parent) {
        function Child() {
        }
        Child.prototype = parent;
        return new Child
      }
      function setNamed(dom, parent, keys) {
        if (dom._visited)
          return;
        var p, v = dom.getAttribute('id') || dom.getAttribute('name');
        if (v) {
          if (keys.indexOf(v) < 0) {
            p = parent[v];
            if (!p)
              parent[v] = dom;
            else if (isArray(p))
              p.push(dom);
            else
              parent[v] = [
                p,
                dom
              ]
          }
          dom._visited = true
        }
      }
      // faster String startsWith alternative
      function startsWith(src, str) {
        return src.slice(0, str.length) === str
      }
      /*
 Virtual dom is an array of custom tags on the document.
 Updates and unmounts propagate downwards from parent to children.
*/
      var virtualDom = [], tagImpl = {}, styleNode;
      function injectStyle(css) {
        if (riot.render)
          return;
        // skip injection on the server
        if (!styleNode) {
          styleNode = mkEl('style');
          styleNode.setAttribute('type', 'text/css')
        }
        var head = document.head || document.getElementsByTagName('head')[0];
        if (styleNode.styleSheet)
          styleNode.styleSheet.cssText += css;
        else
          styleNode.innerHTML += css;
        if (!styleNode._rendered)
          if (styleNode.styleSheet) {
            document.body.appendChild(styleNode)
          } else {
            var rs = $('style[type=riot]');
            if (rs) {
              rs.parentNode.insertBefore(styleNode, rs);
              rs.parentNode.removeChild(rs)
            } else
              head.appendChild(styleNode)
          }
        styleNode._rendered = true
      }
      function mountTo(root, tagName, opts) {
        var tag = tagImpl[tagName],
          // cache the inner HTML to fix #855
          innerHTML = root._innerHTML = root._innerHTML || root.innerHTML;
        // clear the inner html
        root.innerHTML = '';
        if (tag && root)
          tag = new Tag(tag, {
            root: root,
            opts: opts
          }, innerHTML);
        if (tag && tag.mount) {
          tag.mount();
          virtualDom.push(tag);
          return tag.on('unmount', function () {
            virtualDom.splice(virtualDom.indexOf(tag), 1)
          })
        }
      }
      riot.tag = function (name, html, css, attrs, fn) {
        if (isFunction(attrs)) {
          fn = attrs;
          if (/^[\w\-]+\s?=/.test(css)) {
            attrs = css;
            css = ''
          } else
            attrs = ''
        }
        if (css) {
          if (isFunction(css))
            fn = css;
          else
            injectStyle(css)
        }
        tagImpl[name] = {
          name: name,
          tmpl: html,
          attrs: attrs,
          fn: fn
        };
        return name
      };
      riot.mount = function (selector, tagName, opts) {
        var els, allTags, tags = [];
        // helper functions
        function addRiotTags(arr) {
          var list = '';
          each(arr, function (e) {
            list += ', *[' + RIOT_TAG + '="' + e.trim() + '"]'
          });
          return list
        }
        function selectAllTags() {
          var keys = Object.keys(tagImpl);
          return keys + addRiotTags(keys)
        }
        function pushTags(root) {
          var last;
          if (root.tagName) {
            if (tagName && (!(last = root.getAttribute(RIOT_TAG)) || last != tagName))
              root.setAttribute(RIOT_TAG, tagName);
            var tag = mountTo(root, tagName || root.getAttribute(RIOT_TAG) || root.tagName.toLowerCase(), opts);
            if (tag)
              tags.push(tag)
          } else if (root.length) {
            each(root, pushTags)  // assume nodeList
          }
        }
        // ----- mount code -----
        if (typeof tagName === T_OBJECT) {
          opts = tagName;
          tagName = 0
        }
        // crawl the DOM to find the tag
        if (typeof selector === T_STRING) {
          if (selector === '*')
            // select all the tags registered
            // and also the tags found with the riot-tag attribute set
            selector = allTags = selectAllTags();
          else
            // or just the ones named like the selector
            selector += addRiotTags(selector.split(','));
          els = $$(selector)
        } else
          // probably you have passed already a tag or a NodeList
          els = selector;
        // select all the registered and mount them inside their root elements
        if (tagName === '*') {
          // get all custom tags
          tagName = allTags || selectAllTags();
          // if the root els it's just a single tag
          if (els.tagName)
            els = $$(tagName, els);
          else {
            // select all the children for all the different root elements
            var nodeList = [];
            each(els, function (_el) {
              nodeList.push($$(tagName, _el))
            });
            els = nodeList
          }
          // get rid of the tagName
          tagName = 0
        }
        if (els.tagName)
          pushTags(els);
        else
          each(els, pushTags);
        return tags
      };
      // update everything
      riot.update = function () {
        return each(virtualDom, function (tag) {
          tag.update()
        })
      };
      // @deprecated
      riot.mountTo = riot.mount;
      // share methods for other riot parts, e.g. compiler
      riot.util = {
        brackets: brackets,
        tmpl: tmpl
      };
      // support CommonJS, AMD & browser
      /* istanbul ignore next */
      if (typeof exports === T_OBJECT)
        module.exports = riot;
      else if (typeof define === 'function' && define.amd)
        define(function () {
          return window.riot = riot
        });
      else
        window.riot = riot
    }(typeof window != 'undefined' ? window : void 0))
  });
  // source: node_modules/store/store.js
  require.define('store/store', function (module, exports, __dirname, __filename) {
    'use strict'  // Module export pattern from
                  // https://github.com/umdjs/umd/blob/master/returnExports.js
;
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory)
      } else if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory()
      } else {
        // Browser globals (root is window)
        root.store = factory()
      }
    }(this, function () {
      // Store.js
      var store = {}, win = typeof window != 'undefined' ? window : global, doc = win.document, localStorageName = 'localStorage', scriptTag = 'script', storage;
      store.disabled = false;
      store.version = '1.3.20';
      store.set = function (key, value) {
      };
      store.get = function (key, defaultVal) {
      };
      store.has = function (key) {
        return store.get(key) !== undefined
      };
      store.remove = function (key) {
      };
      store.clear = function () {
      };
      store.transact = function (key, defaultVal, transactionFn) {
        if (transactionFn == null) {
          transactionFn = defaultVal;
          defaultVal = null
        }
        if (defaultVal == null) {
          defaultVal = {}
        }
        var val = store.get(key, defaultVal);
        transactionFn(val);
        store.set(key, val)
      };
      store.getAll = function () {
      };
      store.forEach = function () {
      };
      store.serialize = function (value) {
        return JSON.stringify(value)
      };
      store.deserialize = function (value) {
        if (typeof value != 'string') {
          return undefined
        }
        try {
          return JSON.parse(value)
        } catch (e) {
          return value || undefined
        }
      };
      // Functions to encapsulate questionable FireFox 3.6.13 behavior
      // when about.config::dom.storage.enabled === false
      // See https://github.com/marcuswestin/store.js/issues#issue/13
      function isLocalStorageNameSupported() {
        try {
          return localStorageName in win && win[localStorageName]
        } catch (err) {
          return false
        }
      }
      if (isLocalStorageNameSupported()) {
        storage = win[localStorageName];
        store.set = function (key, val) {
          if (val === undefined) {
            return store.remove(key)
          }
          storage.setItem(key, store.serialize(val));
          return val
        };
        store.get = function (key, defaultVal) {
          var val = store.deserialize(storage.getItem(key));
          return val === undefined ? defaultVal : val
        };
        store.remove = function (key) {
          storage.removeItem(key)
        };
        store.clear = function () {
          storage.clear()
        };
        store.getAll = function () {
          var ret = {};
          store.forEach(function (key, val) {
            ret[key] = val
          });
          return ret
        };
        store.forEach = function (callback) {
          for (var i = 0; i < storage.length; i++) {
            var key = storage.key(i);
            callback(key, store.get(key))
          }
        }
      } else if (doc && doc.documentElement.addBehavior) {
        var storageOwner, storageContainer;
        // Since #userData storage applies only to specific paths, we need to
        // somehow link our data to a specific path.  We choose /favicon.ico
        // as a pretty safe option, since all browsers already make a request to
        // this URL anyway and being a 404 will not hurt us here.  We wrap an
        // iframe pointing to the favicon in an ActiveXObject(htmlfile) object
        // (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)
        // since the iframe access rules appear to allow direct access and
        // manipulation of the document element, even for a 404 page.  This
        // document can be used instead of the current document (which would
        // have been limited to the current path) to perform #userData storage.
        try {
          storageContainer = new ActiveXObject('htmlfile');
          storageContainer.open();
          storageContainer.write('<' + scriptTag + '>document.w=window</' + scriptTag + '><iframe src="/favicon.ico"></iframe>');
          storageContainer.close();
          storageOwner = storageContainer.w.frames[0].document;
          storage = storageOwner.createElement('div')
        } catch (e) {
          // somehow ActiveXObject instantiation failed (perhaps some special
          // security settings or otherwse), fall back to per-path storage
          storage = doc.createElement('div');
          storageOwner = doc.body
        }
        var withIEStorage = function (storeFunction) {
          return function () {
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift(storage);
            // See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx
            // and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx
            storageOwner.appendChild(storage);
            storage.addBehavior('#default#userData');
            storage.load(localStorageName);
            var result = storeFunction.apply(store, args);
            storageOwner.removeChild(storage);
            return result
          }
        };
        // In IE7, keys cannot start with a digit or contain certain chars.
        // See https://github.com/marcuswestin/store.js/issues/40
        // See https://github.com/marcuswestin/store.js/issues/83
        var forbiddenCharsRegex = new RegExp('[!"#$%&\'()*+,/\\\\:;<=>?@[\\]^`{|}~]', 'g');
        var ieKeyFix = function (key) {
          return key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___')
        };
        store.set = withIEStorage(function (storage, key, val) {
          key = ieKeyFix(key);
          if (val === undefined) {
            return store.remove(key)
          }
          storage.setAttribute(key, store.serialize(val));
          storage.save(localStorageName);
          return val
        });
        store.get = withIEStorage(function (storage, key, defaultVal) {
          key = ieKeyFix(key);
          var val = store.deserialize(storage.getAttribute(key));
          return val === undefined ? defaultVal : val
        });
        store.remove = withIEStorage(function (storage, key) {
          key = ieKeyFix(key);
          storage.removeAttribute(key);
          storage.save(localStorageName)
        });
        store.clear = withIEStorage(function (storage) {
          var attributes = storage.XMLDocument.documentElement.attributes;
          storage.load(localStorageName);
          for (var i = attributes.length - 1; i >= 0; i--) {
            storage.removeAttribute(attributes[i].name)
          }
          storage.save(localStorageName)
        });
        store.getAll = function (storage) {
          var ret = {};
          store.forEach(function (key, val) {
            ret[key] = val
          });
          return ret
        };
        store.forEach = withIEStorage(function (storage, callback) {
          var attributes = storage.XMLDocument.documentElement.attributes;
          for (var i = 0, attr; attr = attributes[i]; ++i) {
            callback(attr.name, store.deserialize(storage.getAttribute(attr.name)))
          }
        })
      }
      try {
        var testKey = '__storejs__';
        store.set(testKey, testKey);
        if (store.get(testKey) != testKey) {
          store.disabled = true
        }
        store.remove(testKey)
      } catch (e) {
        store.disabled = true
      }
      store.enabled = !store.disabled;
      return store
    }))
  });
  // source: node_modules/crowdstart.js/lib/browser.js
  require.define('crowdstart/lib/browser.js', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Api, Client;
    if (global.Crowdstart == null) {
      global.Crowdstart = {}
    }
    Api = require('crowdstart/lib/api.js');
    Client = require('crowdstart/lib/client/xhr.js');
    Api.CLIENT = Client;
    Api.BLUEPRINTS = require('crowdstart/lib/blueprints/browser.js');
    Crowdstart.Api = Api;
    Crowdstart.Client = Client;
    module.exports = Crowdstart  //# sourceMappingURL=browser.js.map
  });
  // source: node_modules/crowdstart.js/lib/api.js
  require.define('crowdstart/lib/api.js', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Api, isFunction, isString, newError, ref, statusOk;
    ref = require('crowdstart/lib/utils.js'), isFunction = ref.isFunction, isString = ref.isString, newError = ref.newError, statusOk = ref.statusOk;
    module.exports = Api = function () {
      Api.BLUEPRINTS = {};
      Api.CLIENT = null;
      function Api(opts) {
        var blueprints, client, debug, endpoint, k, key, v;
        if (opts == null) {
          opts = {}
        }
        if (!(this instanceof Api)) {
          return new Api(opts)
        }
        endpoint = opts.endpoint, debug = opts.debug, key = opts.key, client = opts.client, blueprints = opts.blueprints;
        this.debug = debug;
        if (blueprints == null) {
          blueprints = this.constructor.BLUEPRINTS
        }
        if (client) {
          this.client = client
        } else {
          this.client = new this.constructor.CLIENT({
            debug: debug,
            endpoint: endpoint,
            key: key
          })
        }
        for (k in blueprints) {
          v = blueprints[k];
          this.addBlueprints(k, v)
        }
      }
      Api.prototype.addBlueprints = function (api, blueprints) {
        var bp, fn, name;
        if (this[api] == null) {
          this[api] = {}
        }
        fn = function (_this) {
          return function (name, bp) {
            var method;
            if (isFunction(bp)) {
              return _this[api][name] = function () {
                return bp.apply(_this, arguments)
              }
            }
            if (bp.expects == null) {
              bp.expects = statusOk
            }
            if (bp.method == null) {
              bp.method = 'POST'
            }
            method = function (data, cb) {
              return _this.client.request(bp, data).then(function (res) {
                var ref1, ref2;
                if (((ref1 = res.data) != null ? ref1.error : void 0) != null) {
                  throw newError(data, res)
                }
                if (!bp.expects(res)) {
                  throw newError(data, res)
                }
                if (bp.process != null) {
                  bp.process.call(_this, res)
                }
                return (ref2 = res.data) != null ? ref2 : res.body
              }).callback(cb)
            };
            return _this[api][name] = method
          }
        }(this);
        for (name in blueprints) {
          bp = blueprints[name];
          fn(name, bp)
        }
      };
      Api.prototype.setKey = function (key) {
        return this.client.setKey(key)
      };
      Api.prototype.setUserKey = function (key) {
        return this.client.setUserKey(key)
      };
      Api.prototype.deleteUserKey = function () {
        return this.client.deleteUserKey()
      };
      Api.prototype.setStore = function (id) {
        this.storeId = id;
        return this.client.setStore(id)
      };
      return Api
    }()  //# sourceMappingURL=api.js.map
  });
  // source: node_modules/crowdstart.js/lib/utils.js
  require.define('crowdstart/lib/utils.js', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    exports.isFunction = function (fn) {
      return typeof fn === 'function'
    };
    exports.isString = function (s) {
      return typeof s === 'string'
    };
    exports.statusOk = function (res) {
      return res.status === 200
    };
    exports.statusCreated = function (res) {
      return res.status === 201
    };
    exports.statusNoContent = function (res) {
      return res.status === 204
    };
    exports.newError = function (data, res) {
      var err, message, ref, ref1, ref2, ref3, ref4;
      if (res == null) {
        res = {}
      }
      message = (ref = res != null ? (ref1 = res.data) != null ? (ref2 = ref1.error) != null ? ref2.message : void 0 : void 0 : void 0) != null ? ref : 'Request failed';
      err = new Error(message);
      err.message = message;
      err.req = data;
      err.data = res.data;
      err.responseText = res.data;
      err.status = res.status;
      err.type = (ref3 = res.data) != null ? (ref4 = ref3.error) != null ? ref4.type : void 0 : void 0;
      return err
    };
    exports.updateQuery = function (url, key, value) {
      var hash, re, separator;
      re = new RegExp('([?&])' + key + '=.*?(&|#|$)(.*)', 'gi');
      if (re.test(url)) {
        if (value != null) {
          return url.replace(re, '$1' + key + '=' + value + '$2$3')
        } else {
          hash = url.split('#');
          url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
          if (hash[1] != null) {
            url += '#' + hash[1]
          }
          return url
        }
      } else {
        if (value != null) {
          separator = url.indexOf('?') !== -1 ? '&' : '?';
          hash = url.split('#');
          url = hash[0] + separator + key + '=' + value;
          if (hash[1] != null) {
            url += '#' + hash[1]
          }
          return url
        } else {
          return url
        }
      }
    }  //# sourceMappingURL=utils.js.map
  });
  // source: node_modules/crowdstart.js/lib/client/xhr.js
  require.define('crowdstart/lib/client/xhr.js', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Xhr, XhrClient, cookie, isFunction, newError, ref, updateQuery;
    Xhr = require('xhr-promise-es6/lib');
    Xhr.Promise = require('broken/lib');
    cookie = require('js-cookie/src/js.cookie');
    ref = require('crowdstart/lib/utils.js'), isFunction = ref.isFunction, newError = ref.newError, updateQuery = ref.updateQuery;
    module.exports = XhrClient = function () {
      XhrClient.prototype.sessionName = 'crwdst';
      function XhrClient(opts) {
        if (opts == null) {
          opts = {}
        }
        if (!(this instanceof XhrClient)) {
          return new XhrClient(opts)
        }
        this.endpoint = 'https://api.crowdstart.com';
        this.key = opts.key, this.debug = opts.debug;
        if (opts.endpoint) {
          this.setEndpoint(opts.endpoint)
        }
        this.getUserKey()
      }
      XhrClient.prototype.setEndpoint = function (endpoint) {
        return this.endpoint = endpoint.replace(/\/$/, '')
      };
      XhrClient.prototype.setStore = function (id) {
        return this.storeId = id
      };
      XhrClient.prototype.setKey = function (key) {
        return this.key = key
      };
      XhrClient.prototype.getKey = function () {
        return this.userKey || this.key || this.constructor.KEY
      };
      XhrClient.prototype.getUserKey = function () {
        var session;
        if ((session = cookie.getJSON(this.sessionName)) != null) {
          if (session.userKey != null) {
            this.userKey = session.userKey
          }
        }
        return this.userKey
      };
      XhrClient.prototype.setUserKey = function (key) {
        cookie.set(this.sessionName, { userKey: key }, { expires: 7 * 24 * 3600 * 1000 });
        return this.userKey = key
      };
      XhrClient.prototype.deleteUserKey = function () {
        cookie.set(this.sessionName, { userKey: null }, { expires: 7 * 24 * 3600 * 1000 });
        return this.userKey
      };
      XhrClient.prototype.getUrl = function (url, data, key) {
        if (isFunction(url)) {
          url = url.call(this, data)
        }
        return updateQuery(this.endpoint + url, 'token', key)
      };
      XhrClient.prototype.request = function (blueprint, data, key) {
        var opts;
        if (key == null) {
          key = this.getKey()
        }
        opts = {
          url: this.getUrl(blueprint.url, data, key),
          method: blueprint.method,
          data: JSON.stringify(data)
        };
        if (this.debug) {
          void 0;
          void 0
        }
        return new Xhr().send(opts).then(function (res) {
          if (this.debug) {
            void 0;
            void 0
          }
          res.data = res.responseText;
          return res
        })['catch'](function (res) {
          var err, error, ref1;
          try {
            res.data = (ref1 = res.responseText) != null ? ref1 : JSON.parse(res.xhr.responseText)
          } catch (error) {
            err = error
          }
          err = newError(data, res);
          if (this.debug) {
            void 0;
            void 0;
            void 0
          }
          throw err
        })
      };
      return XhrClient
    }()  //# sourceMappingURL=xhr.js.map
  });
  // source: node_modules/xhr-promise-es6/lib/index.js
  require.define('xhr-promise-es6/lib', function (module, exports, __dirname, __filename) {
    /*
 * Copyright 2015 Scott Brady
 * MIT License
 * https://github.com/scottbrady/xhr-promise/blob/master/LICENSE
 */
    var ParseHeaders, XMLHttpRequestPromise, objectAssign;
    ParseHeaders = require('parse-headers/parse-headers');
    objectAssign = require('object-assign');
    /*
 * Module to wrap an XMLHttpRequest in a promise.
 */
    module.exports = XMLHttpRequestPromise = function () {
      function XMLHttpRequestPromise() {
      }
      XMLHttpRequestPromise.DEFAULT_CONTENT_TYPE = 'application/x-www-form-urlencoded; charset=UTF-8';
      XMLHttpRequestPromise.Promise = global.Promise;
      /*
   * XMLHttpRequestPromise.send(options) -> Promise
   * - options (Object): URL, method, data, etc.
   *
   * Create the XHR object and wire up event handlers to use a promise.
   */
      XMLHttpRequestPromise.prototype.send = function (options) {
        var defaults;
        if (options == null) {
          options = {}
        }
        defaults = {
          method: 'GET',
          data: null,
          headers: {},
          async: true,
          username: null,
          password: null
        };
        options = objectAssign({}, defaults, options);
        return new this.constructor.Promise(function (_this) {
          return function (resolve, reject) {
            var e, header, ref, value, xhr;
            if (!XMLHttpRequest) {
              _this._handleError('browser', reject, null, "browser doesn't support XMLHttpRequest");
              return
            }
            if (typeof options.url !== 'string' || options.url.length === 0) {
              _this._handleError('url', reject, null, 'URL is a required parameter');
              return
            }
            _this._xhr = xhr = new XMLHttpRequest;
            xhr.onload = function () {
              var responseText;
              _this._detachWindowUnload();
              try {
                responseText = _this._getResponseText()
              } catch (_error) {
                _this._handleError('parse', reject, null, 'invalid JSON response');
                return
              }
              return resolve({
                url: _this._getResponseUrl(),
                status: xhr.status,
                statusText: xhr.statusText,
                responseText: responseText,
                headers: _this._getHeaders(),
                xhr: xhr
              })
            };
            xhr.onerror = function () {
              return _this._handleError('error', reject)
            };
            xhr.ontimeout = function () {
              return _this._handleError('timeout', reject)
            };
            xhr.onabort = function () {
              return _this._handleError('abort', reject)
            };
            _this._attachWindowUnload();
            xhr.open(options.method, options.url, options.async, options.username, options.password);
            if (options.data != null && !options.headers['Content-Type']) {
              options.headers['Content-Type'] = _this.constructor.DEFAULT_CONTENT_TYPE
            }
            ref = options.headers;
            for (header in ref) {
              value = ref[header];
              xhr.setRequestHeader(header, value)
            }
            try {
              return xhr.send(options.data)
            } catch (_error) {
              e = _error;
              return _this._handleError('send', reject, null, e.toString())
            }
          }
        }(this))
      };
      /*
   * XMLHttpRequestPromise.getXHR() -> XMLHttpRequest
   */
      XMLHttpRequestPromise.prototype.getXHR = function () {
        return this._xhr
      };
      /*
   * XMLHttpRequestPromise._attachWindowUnload()
   *
   * Fix for IE 9 and IE 10
   * Internet Explorer freezes when you close a webpage during an XHR request
   * https://support.microsoft.com/kb/2856746
   *
   */
      XMLHttpRequestPromise.prototype._attachWindowUnload = function () {
        this._unloadHandler = this._handleWindowUnload.bind(this);
        if (window.attachEvent) {
          return window.attachEvent('onunload', this._unloadHandler)
        }
      };
      /*
   * XMLHttpRequestPromise._detachWindowUnload()
   */
      XMLHttpRequestPromise.prototype._detachWindowUnload = function () {
        if (window.detachEvent) {
          return window.detachEvent('onunload', this._unloadHandler)
        }
      };
      /*
   * XMLHttpRequestPromise._getHeaders() -> Object
   */
      XMLHttpRequestPromise.prototype._getHeaders = function () {
        return ParseHeaders(this._xhr.getAllResponseHeaders())
      };
      /*
   * XMLHttpRequestPromise._getResponseText() -> Mixed
   *
   * Parses response text JSON if present.
   */
      XMLHttpRequestPromise.prototype._getResponseText = function () {
        var responseText;
        responseText = typeof this._xhr.responseText === 'string' ? this._xhr.responseText : '';
        switch (this._xhr.getResponseHeader('Content-Type')) {
        case 'application/json':
        case 'text/javascript':
          responseText = JSON.parse(responseText + '')
        }
        return responseText
      };
      /*
   * XMLHttpRequestPromise._getResponseUrl() -> String
   *
   * Actual response URL after following redirects.
   */
      XMLHttpRequestPromise.prototype._getResponseUrl = function () {
        if (this._xhr.responseURL != null) {
          return this._xhr.responseURL
        }
        if (/^X-Request-URL:/m.test(this._xhr.getAllResponseHeaders())) {
          return this._xhr.getResponseHeader('X-Request-URL')
        }
        return ''
      };
      /*
   * XMLHttpRequestPromise._handleError(reason, reject, status, statusText)
   * - reason (String)
   * - reject (Function)
   * - status (String)
   * - statusText (String)
   */
      XMLHttpRequestPromise.prototype._handleError = function (reason, reject, status, statusText) {
        this._detachWindowUnload();
        return reject({
          reason: reason,
          status: status || this._xhr.status,
          statusText: statusText || this._xhr.statusText,
          xhr: this._xhr
        })
      };
      /*
   * XMLHttpRequestPromise._handleWindowUnload()
   */
      XMLHttpRequestPromise.prototype._handleWindowUnload = function () {
        return this._xhr.abort()
      };
      return XMLHttpRequestPromise
    }()
  });
  // source: node_modules/parse-headers/parse-headers.js
  require.define('parse-headers/parse-headers', function (module, exports, __dirname, __filename) {
    var trim = require('trim'), forEach = require('for-each'), isArray = function (arg) {
        return Object.prototype.toString.call(arg) === '[object Array]'
      };
    module.exports = function (headers) {
      if (!headers)
        return {};
      var result = {};
      forEach(trim(headers).split('\n'), function (row) {
        var index = row.indexOf(':'), key = trim(row.slice(0, index)).toLowerCase(), value = trim(row.slice(index + 1));
        if (typeof result[key] === 'undefined') {
          result[key] = value
        } else if (isArray(result[key])) {
          result[key].push(value)
        } else {
          result[key] = [
            result[key],
            value
          ]
        }
      });
      return result
    }
  });
  // source: node_modules/trim/index.js
  require.define('trim', function (module, exports, __dirname, __filename) {
    exports = module.exports = trim;
    function trim(str) {
      return str.replace(/^\s*|\s*$/g, '')
    }
    exports.left = function (str) {
      return str.replace(/^\s*/, '')
    };
    exports.right = function (str) {
      return str.replace(/\s*$/, '')
    }
  });
  // source: node_modules/for-each/index.js
  require.define('for-each', function (module, exports, __dirname, __filename) {
    var isFunction = require('is-function');
    module.exports = forEach;
    var toString = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function forEach(list, iterator, context) {
      if (!isFunction(iterator)) {
        throw new TypeError('iterator must be a function')
      }
      if (arguments.length < 3) {
        context = this
      }
      if (toString.call(list) === '[object Array]')
        forEachArray(list, iterator, context);
      else if (typeof list === 'string')
        forEachString(list, iterator, context);
      else
        forEachObject(list, iterator, context)
    }
    function forEachArray(array, iterator, context) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
          iterator.call(context, array[i], i, array)
        }
      }
    }
    function forEachString(string, iterator, context) {
      for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        iterator.call(context, string.charAt(i), i, string)
      }
    }
    function forEachObject(object, iterator, context) {
      for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
          iterator.call(context, object[k], k, object)
        }
      }
    }
  });
  // source: node_modules/is-function/index.js
  require.define('is-function', function (module, exports, __dirname, __filename) {
    module.exports = isFunction;
    var toString = Object.prototype.toString;
    function isFunction(fn) {
      var string = toString.call(fn);
      return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt)
    }
    ;
  });
  // source: node_modules/object-assign/index.js
  require.define('object-assign', function (module, exports, __dirname, __filename) {
    /* eslint-disable no-unused-vars */
    'use strict';
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === undefined) {
        throw new TypeError('Object.assign cannot be called with null or undefined')
      }
      return Object(val)
    }
    module.exports = Object.assign || function (target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key]
          }
        }
        if (Object.getOwnPropertySymbols) {
          symbols = Object.getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]]
            }
          }
        }
      }
      return to
    }
  });
  // source: node_modules/js-cookie/src/js.cookie.js
  require.define('js-cookie/src/js.cookie', function (module, exports, __dirname, __filename) {
    /*!
 * JavaScript Cookie v2.1.0
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(factory)
      } else if (typeof exports === 'object') {
        module.exports = factory()
      } else {
        var _OldCookies = window.Cookies;
        var api = window.Cookies = factory();
        api.noConflict = function () {
          window.Cookies = _OldCookies;
          return api
        }
      }
    }(function () {
      function extend() {
        var i = 0;
        var result = {};
        for (; i < arguments.length; i++) {
          var attributes = arguments[i];
          for (var key in attributes) {
            result[key] = attributes[key]
          }
        }
        return result
      }
      function init(converter) {
        function api(key, value, attributes) {
          var result;
          // Write
          if (arguments.length > 1) {
            attributes = extend({ path: '/' }, api.defaults, attributes);
            if (typeof attributes.expires === 'number') {
              var expires = new Date;
              expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 86400000);
              attributes.expires = expires
            }
            try {
              result = JSON.stringify(value);
              if (/^[\{\[]/.test(result)) {
                value = result
              }
            } catch (e) {
            }
            if (!converter.write) {
              value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent)
            } else {
              value = converter.write(value, key)
            }
            key = encodeURIComponent(String(key));
            key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
            key = key.replace(/[\(\)]/g, escape);
            return document.cookie = [
              key,
              '=',
              value,
              attributes.expires && '; expires=' + attributes.expires.toUTCString(),
              // use expires attribute, max-age is not supported by IE
              attributes.path && '; path=' + attributes.path,
              attributes.domain && '; domain=' + attributes.domain,
              attributes.secure ? '; secure' : ''
            ].join('')
          }
          // Read
          if (!key) {
            result = {}
          }
          // To prevent the for loop in the first place assign an empty array
          // in case there are no cookies at all. Also prevents odd result when
          // calling "get()"
          var cookies = document.cookie ? document.cookie.split('; ') : [];
          var rdecode = /(%[0-9A-Z]{2})+/g;
          var i = 0;
          for (; i < cookies.length; i++) {
            var parts = cookies[i].split('=');
            var name = parts[0].replace(rdecode, decodeURIComponent);
            var cookie = parts.slice(1).join('=');
            if (cookie.charAt(0) === '"') {
              cookie = cookie.slice(1, -1)
            }
            try {
              cookie = converter.read ? converter.read(cookie, name) : converter(cookie, name) || cookie.replace(rdecode, decodeURIComponent);
              if (this.json) {
                try {
                  cookie = JSON.parse(cookie)
                } catch (e) {
                }
              }
              if (key === name) {
                result = cookie;
                break
              }
              if (!key) {
                result[name] = cookie
              }
            } catch (e) {
            }
          }
          return result
        }
        api.get = api.set = api;
        api.getJSON = function () {
          return api.apply({ json: true }, [].slice.call(arguments))
        };
        api.defaults = {};
        api.remove = function (key, attributes) {
          api(key, '', extend(attributes, { expires: -1 }))
        };
        api.withConverter = init;
        return api
      }
      return init(function () {
      })
    }))
  });
  // source: node_modules/crowdstart.js/lib/blueprints/browser.js
  require.define('crowdstart/lib/blueprints/browser.js', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var blueprints, byId, createBlueprint, fn, i, isFunction, len, model, models, ref, ref1, statusCreated, statusNoContent, statusOk, storePrefixed, userModels;
    ref = require('crowdstart/lib/utils.js'), isFunction = ref.isFunction, statusCreated = ref.statusCreated, statusNoContent = ref.statusNoContent, statusOk = ref.statusOk;
    ref1 = require('crowdstart/lib/blueprints/url.js'), byId = ref1.byId, storePrefixed = ref1.storePrefixed;
    createBlueprint = function (name) {
      var endpoint;
      endpoint = '/' + name;
      return {
        list: {
          url: endpoint,
          method: 'GET',
          expects: statusOk
        },
        get: {
          url: byId(name),
          method: 'GET',
          expects: statusOk
        }
      }
    };
    blueprints = {
      account: {
        get: {
          url: '/account',
          method: 'GET',
          expects: statusOk
        },
        update: {
          url: '/account',
          method: 'PATCH',
          expects: statusOk
        },
        exists: {
          url: function (x) {
            var ref2, ref3, ref4;
            return '/account/exists/' + ((ref2 = (ref3 = (ref4 = x.email) != null ? ref4 : x.username) != null ? ref3 : x.id) != null ? ref2 : x)
          },
          method: 'GET',
          expects: statusOk,
          process: function (res) {
            return res.data.exists
          }
        },
        create: {
          url: '/account/create',
          method: 'POST',
          expects: statusCreated
        },
        enable: {
          url: function (x) {
            var ref2;
            return '/account/enable/' + ((ref2 = x.tokenId) != null ? ref2 : x)
          },
          method: 'POST',
          expects: statusOk
        },
        login: {
          url: '/account/login',
          method: 'POST',
          expects: statusOk,
          process: function (res) {
            this.setUserKey(res.data.token);
            return res
          }
        },
        logout: function () {
          return this.deleteUserKey()
        },
        reset: {
          url: '/account/reset',
          method: 'POST',
          expects: statusOk
        },
        confirm: {
          url: function (x) {
            var ref2;
            return '/account/confirm/' + ((ref2 = x.tokenId) != null ? ref2 : x)
          },
          method: 'POST',
          expects: statusOk
        }
      },
      checkout: {
        authorize: {
          url: storePrefixed('/checkout/authorize'),
          method: 'POST',
          expects: statusOk
        },
        capture: {
          url: storePrefixed(function (x) {
            var ref2;
            return '/checkout/capture/' + ((ref2 = x.orderId) != null ? ref2 : x)
          }),
          method: 'POST',
          expects: statusOk
        },
        charge: {
          url: storePrefixed('/checkout/charge'),
          method: 'POST',
          expects: statusOk
        },
        paypal: {
          url: storePrefixed('/checkout/paypal'),
          method: 'POST',
          expects: statusOk
        }
      },
      referrer: {
        create: {
          url: '/referrer',
          method: 'POST',
          expects: statusCreated
        }
      }
    };
    models = [
      'collection',
      'coupon',
      'product',
      'variant'
    ];
    userModels = [
      'order',
      'subscription'
    ];
    fn = function (model) {
      return blueprints[model] = createBlueprint(model)
    };
    for (i = 0, len = models.length; i < len; i++) {
      model = models[i];
      fn(model)
    }
    module.exports = blueprints  //# sourceMappingURL=browser.js.map
  });
  // source: node_modules/crowdstart.js/lib/blueprints/url.js
  require.define('crowdstart/lib/blueprints/url.js', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var isFunction, sp;
    isFunction = require('crowdstart/lib/utils.js').isFunction;
    exports.storePrefixed = sp = function (u) {
      return function (x) {
        var url;
        if (isFunction(u)) {
          url = u(x)
        } else {
          url = u
        }
        if (this.storeId != null) {
          return '/store/' + this.storeId + url
        } else {
          return url
        }
      }
    };
    exports.byId = function (name) {
      switch (name) {
      case 'coupon':
        return sp(function (x) {
          var ref;
          return '/coupon/' + ((ref = x.code) != null ? ref : x)
        });
      case 'collection':
        return sp(function (x) {
          var ref;
          return '/collection/' + ((ref = x.slug) != null ? ref : x)
        });
      case 'product':
        return sp(function (x) {
          var ref, ref1;
          return '/product/' + ((ref = (ref1 = x.id) != null ? ref1 : x.slug) != null ? ref : x)
        });
      case 'variant':
        return sp(function (x) {
          var ref, ref1;
          return '/variant/' + ((ref = (ref1 = x.id) != null ? ref1 : x.sku) != null ? ref : x)
        });
      default:
        return function (x) {
          var ref;
          return '/' + name + '/' + ((ref = x.id) != null ? ref : x)
        }
      }
    }  //# sourceMappingURL=url.js.map
  });
  // source: src/mediator.coffee
  require.define('./mediator', function (module, exports, __dirname, __filename) {
    var riot;
    riot = require('riot/riot');
    module.exports = riot.observable({})
  });
  // source: src/events.coffee
  require.define('./events', function (module, exports, __dirname, __filename) {
    module.exports = {
      SetData: 'set-data',
      UpdateItems: 'update-items',
      Ready: 'ready',
      Change: 'change',
      ChangeSuccess: 'change-success',
      ChangeFailed: 'change-failed',
      Submit: 'submit',
      SubmitSuccess: 'submit-success',
      SubmitFailed: 'submit-failed'
    }
  });
  // source: src/utils/analytics.coffee
  require.define('./utils/analytics', function (module, exports, __dirname, __filename) {
    module.exports = {
      track: function (event, data) {
        var err, error;
        if (window.analytics != null) {
          try {
            return window.analytics.track(event, data)
          } catch (error) {
            err = error;
            return void 0
          }
        }
      }
    }
  });
  // source: src/shop.coffee
  require.define('./shop', function (module, exports, __dirname, __filename) {
    var Shop;
    module.exports = Shop = function () {
      function Shop() {
      }
      return Shop
    }()
  });
  // source: src/forms/index.coffee
  require.define('./forms', function (module, exports, __dirname, __filename) {
    module.exports = {
      Checkout: require('./forms/checkout'),
      Cart: require('./forms/cart'),
      LineItem: require('./forms/lineitem'),
      register: function () {
        this.Checkout.register();
        this.Cart.register();
        return this.LineItem.register()
      }
    }
  });
  // source: src/forms/checkout.coffee
  require.define('./forms/checkout', function (module, exports, __dirname, __filename) {
    var CheckoutForm, CrowdControl, Events, m, riot, store, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = require('crowdcontrol/lib');
    riot = require('riot/riot');
    m = require('./mediator');
    Events = require('./events');
    store = require('store/store');
    module.exports = CheckoutForm = function (superClass) {
      extend(CheckoutForm, superClass);
      function CheckoutForm() {
        return CheckoutForm.__super__.constructor.apply(this, arguments)
      }
      CheckoutForm.prototype.tag = 'checkout';
      CheckoutForm.prototype.html = '<form onsubmit={submit}>\n  <yield/>\n</form>';
      CheckoutForm.prototype.errorMessage = null;
      CheckoutForm.prototype.loading = false;
      CheckoutForm.prototype.checkedOut = false;
      CheckoutForm.prototype.configs = require('./forms/config');
      CheckoutForm.prototype._submit = function (event) {
        var data, i, item, len, newItems, ref;
        if (this.loading || this.checkedOut) {
          return
        }
        this.loading = true;
        m.trigger(Events.Submit, this.tag);
        this.errorMessage = null;
        data = {
          user: this.data.get('user'),
          order: this.data.get('order'),
          payment: this.data.get('payment')
        };
        newItems = [];
        ref = data.order.items;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item.quantity > 0) {
            newItems.push(item)
          }
        }
        data.order.items = newItems;
        this.update();
        return this.client.checkout.authorize(data).then(function (_this) {
          return function (order) {
            var hasErrored, referralProgram;
            _this.data.set('coupon', _this.data.get('order.coupon') || {});
            _this.data.set('order', order);
            referralProgram = _this.data.get('referralProgram');
            if (referralProgram != null) {
              _this.client.referrer.create({
                userId: data.order.userId,
                orderId: data.order.orderId,
                program: referralProgram
              }).then(function (referrer) {
                return _this.data.set('referrerId', referrer.id)
              })['catch'](function (err) {
                return void 0
              })
            }
            hasErrored = false;
            _this.client.checkout.capture(order.id).then(function (order) {
              return _this.data.set('order', order)
            })['catch'](function (err) {
              hasErrored = true;
              _this.loading = false;
              void 0;
              _this.errorMessage = 'Sorry, unable to complete your transaction. Please try again later.';
              m.trigger(Events.SubmitFailed, _this.tag);
              return _this.update()
            });
            setTimeout(function () {
              if (!hasErrored) {
                _this.loading = false;
                store.clear();
                _this.checkedOut = true;
                m.trigger(Events.SubmitSuccess, _this.tag);
                return _this.update()
              }
            }, 200);
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.loading = false;
            void 0;
            if (err.message === 'Your card was declined.') {
              _this.errorMessage = 'Sorry, your card was declined. Please check your payment information.'
            } else {
              _this.errorMessage = 'Sorry, unable to complete your transaction. Please try again later.'
            }
            m.trigger(Events.SubmitFailed, _this.tag);
            return _this.update()
          }
        }(this))
      };
      return CheckoutForm
    }(CrowdControl.Views.Form)
  });
  // source: node_modules/crowdcontrol/lib/index.js
  require.define('crowdcontrol/lib', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var CrowdControl, riot;
    riot = require('riot/riot');
    CrowdControl = {
      Views: require('crowdcontrol/lib/views'),
      start: function (opts) {
        return riot.mount('*', opts)
      }
    };
    if (module.exports != null) {
      module.exports = CrowdControl
    }
    if (typeof window !== 'undefined' && window !== null) {
      if (window.Crowdstart != null) {
        window.Crowdstart.Crowdcontrol = CrowdControl
      } else {
        window.Crowdstart = { CrowdControl: CrowdControl }
      }
      window.riot = riot
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/index.js
  require.define('crowdcontrol/lib/views', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    module.exports = {
      Form: require('crowdcontrol/lib/views/form'),
      Input: require('crowdcontrol/lib/views/input'),
      View: require('crowdcontrol/lib/views/view')
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/form.js
  require.define('crowdcontrol/lib/views/form', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Form, Promise, View, inputify, observable, settle, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    View = require('crowdcontrol/lib/views/view');
    inputify = require('crowdcontrol/lib/views/inputify');
    observable = require('riot/riot').observable;
    Promise = require('broken/lib');
    settle = require('promise-settle');
    Form = function (superClass) {
      extend(Form, superClass);
      function Form() {
        return Form.__super__.constructor.apply(this, arguments)
      }
      Form.prototype.configs = null;
      Form.prototype.inputs = null;
      Form.prototype.data = null;
      Form.prototype.initInputs = function () {
        var input, name, ref, results1;
        this.inputs = {};
        if (this.configs != null) {
          this.inputs = inputify(this.data, this.configs);
          ref = this.inputs;
          results1 = [];
          for (name in ref) {
            input = ref[name];
            results1.push(observable(input))
          }
          return results1
        }
      };
      Form.prototype.init = function () {
        return this.initInputs()
      };
      Form.prototype.submit = function () {
        var input, name, pRef, ps, ref;
        ps = [];
        ref = this.inputs;
        for (name in ref) {
          input = ref[name];
          pRef = {};
          input.trigger('validate', pRef);
          ps.push(pRef.p)
        }
        return settle(ps).then(function (_this) {
          return function (results) {
            var i, len, result;
            for (i = 0, len = results.length; i < len; i++) {
              result = results[i];
              if (!result.isFulfilled()) {
                return
              }
            }
            return _this._submit.apply(_this, arguments)
          }
        }(this))
      };
      Form.prototype._submit = function () {
      };
      return Form
    }(View);
    module.exports = Form  //# sourceMappingURL=form.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/view.js
  require.define('crowdcontrol/lib/views/view', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var View, collapsePrototype, isFunction, objectAssign, riot, setPrototypeOf;
    riot = require('riot/riot');
    objectAssign = require('object-assign');
    setPrototypeOf = require('setprototypeof');
    isFunction = require('is-function');
    collapsePrototype = function (collapse, proto) {
      var parentProto;
      if (proto === View.prototype) {
        return
      }
      parentProto = Object.getPrototypeOf(proto);
      collapsePrototype(collapse, parentProto);
      return objectAssign(collapse, parentProto)
    };
    View = function () {
      View.register = function () {
        return new this
      };
      View.prototype.tag = '';
      View.prototype.html = '';
      View.prototype.css = '';
      View.prototype.attrs = '';
      View.prototype.events = null;
      function View() {
        var newProto;
        newProto = collapsePrototype({}, this);
        this.beforeInit();
        riot.tag(this.tag, this.html, this.css, this.attrs, function (opts) {
          var fn, handler, k, name, parent, proto, ref, self, v;
          if (newProto != null) {
            for (k in newProto) {
              v = newProto[k];
              if (isFunction(v)) {
                (function (_this) {
                  return function (v) {
                    var oldFn;
                    if (_this[k] != null) {
                      oldFn = _this[k];
                      return _this[k] = function () {
                        oldFn.apply(_this, arguments);
                        return v.apply(_this, arguments)
                      }
                    } else {
                      return _this[k] = function () {
                        return v.apply(_this, arguments)
                      }
                    }
                  }
                }(this)(v))
              } else {
                this[k] = v
              }
            }
          }
          self = this;
          parent = self.parent;
          proto = Object.getPrototypeOf(self);
          while (parent != null && parent !== proto) {
            setPrototypeOf(self, parent);
            self = parent;
            parent = self.parent;
            proto = Object.getPrototypeOf(self)
          }
          if (opts != null) {
            for (k in opts) {
              v = opts[k];
              this[k] = v
            }
          }
          if (this.events != null) {
            ref = this.events;
            fn = function (_this) {
              return function (name, handler) {
                if (typeof handler === 'string') {
                  return _this.on(name, function () {
                    return _this[handler].apply(_this, arguments)
                  })
                } else {
                  return _this.on(name, function () {
                    return handler.apply(_this, arguments)
                  })
                }
              }
            }(this);
            for (name in ref) {
              handler = ref[name];
              fn(name, handler)
            }
          }
          return this.init(opts)
        })
      }
      View.prototype.beforeInit = function () {
      };
      View.prototype.init = function () {
      };
      return View
    }();
    module.exports = View  //# sourceMappingURL=view.js.map
  });
  // source: node_modules/setprototypeof/index.js
  require.define('setprototypeof', function (module, exports, __dirname, __filename) {
    module.exports = Object.setPrototypeOf || { __proto__: [] } instanceof Array ? setProtoOf : mixinProperties;
    function setProtoOf(obj, proto) {
      obj.__proto__ = proto
    }
    function mixinProperties(obj, proto) {
      for (var prop in proto) {
        obj[prop] = proto[prop]
      }
    }
  });
  // source: node_modules/crowdcontrol/lib/views/inputify.js
  require.define('crowdcontrol/lib/views/inputify', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Promise, inputify, isFunction, isRef, refer;
    Promise = require('broken/lib');
    isFunction = require('is-function');
    refer = require('crowdcontrol/node_modules/referential/lib');
    isRef = function (o) {
      return o != null && isFunction(o.ref)
    };
    inputify = function (data, configs) {
      var config, fn, inputs, name, ref;
      ref = data;
      if (!isRef(ref)) {
        ref = refer(data)
      }
      inputs = {};
      fn = function (name, config) {
        var fn1, i, input, len, middleware, middlewareFn, validate;
        middleware = [];
        if (config && config.length > 0) {
          fn1 = function (name, middlewareFn) {
            return middleware.push(function (pair) {
              ref = pair[0], name = pair[1];
              return Promise.resolve(pair).then(function (pair) {
                return middlewareFn.call(pair[0], pair[0].get(pair[1]), pair[1], pair[0])
              }).then(function (v) {
                ref.set(name, v);
                return pair
              })
            })
          };
          for (i = 0, len = config.length; i < len; i++) {
            middlewareFn = config[i];
            fn1(name, middlewareFn)
          }
        }
        middleware.push(function (pair) {
          ref = pair[0], name = pair[1];
          return Promise.resolve(ref.get(name))
        });
        validate = function (ref, name) {
          var j, len1, p;
          p = Promise.resolve([
            ref,
            name
          ]);
          for (j = 0, len1 = middleware.length; j < len1; j++) {
            middlewareFn = middleware[j];
            p = p.then(middlewareFn)
          }
          return p
        };
        input = {
          name: name,
          ref: ref,
          config: config,
          validate: validate
        };
        return inputs[name] = input
      };
      for (name in configs) {
        config = configs[name];
        fn(name, config)
      }
      return inputs
    };
    module.exports = inputify  //# sourceMappingURL=inputify.js.map
  });
  // source: node_modules/crowdcontrol/node_modules/referential/lib/index.js
  require.define('crowdcontrol/node_modules/referential/lib', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var refer;
    refer = require('crowdcontrol/node_modules/referential/lib/refer');
    refer.Ref = require('crowdcontrol/node_modules/referential/lib/ref');
    module.exports = refer  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/node_modules/referential/lib/refer.js
  require.define('crowdcontrol/node_modules/referential/lib/refer', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Ref, refer;
    Ref = require('crowdcontrol/node_modules/referential/lib/ref');
    module.exports = refer = function (state, ref) {
      var fn, i, len, method, ref1, wrapper;
      if (ref == null) {
        ref = null
      }
      if (ref == null) {
        ref = new Ref(state)
      }
      wrapper = function (key) {
        return ref.get(key)
      };
      ref1 = [
        'value',
        'get',
        'set',
        'extend',
        'index',
        'ref'
      ];
      fn = function (method) {
        return wrapper[method] = function () {
          return ref[method].apply(ref, arguments)
        }
      };
      for (i = 0, len = ref1.length; i < len; i++) {
        method = ref1[i];
        fn(method)
      }
      wrapper.refer = function (key) {
        return refer(null, ref.ref(key))
      };
      wrapper.clone = function (key) {
        return refer(null, ref.clone(key))
      };
      return wrapper
    }  //# sourceMappingURL=refer.js.map
  });
  // source: node_modules/crowdcontrol/node_modules/referential/lib/ref.js
  require.define('crowdcontrol/node_modules/referential/lib/ref', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Ref, extend, isArray, isNumber, isObject, isString;
    extend = require('node.extend');
    isArray = require('is-array');
    isNumber = require('is-number');
    isObject = require('crowdcontrol/node_modules/referential/node_modules/is-object');
    isString = require('is-string');
    module.exports = Ref = function () {
      function Ref(_value, parent, key1) {
        this._value = _value;
        this.parent = parent;
        this.key = key1;
        this._cache = {}
      }
      Ref.prototype._mutate = function () {
        return this._cache = {}
      };
      Ref.prototype.value = function (state) {
        if (!this.parent) {
          if (state != null) {
            this._value = state
          }
          return this._value
        }
        if (state != null) {
          return this.parent.set(this.key, state)
        } else {
          return this.parent.get(this.key)
        }
      };
      Ref.prototype.ref = function (key) {
        if (!key) {
          return this
        }
        return new Ref(null, this, key)
      };
      Ref.prototype.get = function (key) {
        if (!key) {
          return this.value()
        } else {
          if (this._cache[key]) {
            return this._cache[key]
          }
          return this._cache[key] = this.index(key)
        }
      };
      Ref.prototype.set = function (key, value) {
        this._mutate();
        if (value == null) {
          this.value(extend(this.value(), key))
        } else {
          this.index(key, value)
        }
        return this
      };
      Ref.prototype.extend = function (key, value) {
        var clone;
        this._mutate();
        if (value == null) {
          this.value(extend(true, this.value(), key))
        } else {
          if (isObject(value)) {
            this.value(extend(true, this.ref(key).get(), value))
          } else {
            clone = this.clone();
            this.set(key, value);
            this.value(extend(true, clone.get(), this.value()))
          }
        }
        return this
      };
      Ref.prototype.clone = function (key) {
        return new Ref(extend(true, {}, this.get(key)))
      };
      Ref.prototype.index = function (key, value, obj, prev) {
        var next, prop, props;
        if (obj == null) {
          obj = this.value()
        }
        if (this.parent) {
          return this.parent.index(this.key + '.' + key, value)
        }
        if (isNumber(key)) {
          key = String(key)
        }
        props = key.split('.');
        while (prop = props.shift()) {
          if (!props.length) {
            if (value != null) {
              return obj[prop] = value
            } else {
              return obj[prop]
            }
          } else {
            next = props[0];
            if (obj[next] == null) {
              if (isNumber(next)) {
                if (obj[prop] == null) {
                  obj[prop] = []
                }
              } else {
                if (obj[prop] == null) {
                  obj[prop] = {}
                }
              }
            }
          }
          obj = obj[prop]
        }
      };
      return Ref
    }()  //# sourceMappingURL=ref.js.map
  });
  // source: node_modules/crowdcontrol/node_modules/referential/node_modules/is-object/index.js
  require.define('crowdcontrol/node_modules/referential/node_modules/is-object', function (module, exports, __dirname, __filename) {
    'use strict';
    module.exports = function isObject(x) {
      return typeof x === 'object' && x !== null
    }
  });
  // source: node_modules/promise-settle/index.js
  require.define('promise-settle', function (module, exports, __dirname, __filename) {
    'use strict';
    module.exports = require('promise-settle/lib/promise-settle')
  });
  // source: node_modules/promise-settle/lib/promise-settle.js
  require.define('promise-settle/lib/promise-settle', function (module, exports, __dirname, __filename) {
    'use strict';
    module.exports = settle;
    function settle(promises) {
      return Promise.resolve().then(function () {
        return promises
      }).then(function (promises) {
        if (!Array.isArray(promises))
          throw new TypeError('Expected an array of Promises');
        var promiseResults = promises.map(function (promise) {
          return Promise.resolve().then(function () {
            return promise
          }).then(function (result) {
            return promiseResult(result)
          }).catch(function (err) {
            return promiseResult(null, err)
          })
        });
        return Promise.all(promiseResults)
      })
    }
    function promiseResult(result, err) {
      var isFulfilled = typeof err === 'undefined';
      var value = isFulfilled ? returns.bind(result) : throws.bind(new Error('Promise is rejected'));
      var isRejected = !isFulfilled;
      var reason = isRejected ? returns.bind(err) : throws.bind(new Error('Promise is fulfilled'));
      return {
        isFulfilled: returns.bind(isFulfilled),
        isRejected: returns.bind(isRejected),
        value: value,
        reason: reason
      }
    }
    function returns() {
      return this
    }
    function throws() {
      throw this
    }
  });
  // source: node_modules/crowdcontrol/lib/views/input.js
  require.define('crowdcontrol/lib/views/input', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Input, View, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    View = require('crowdcontrol/lib/views/view');
    Input = function (superClass) {
      extend(Input, superClass);
      function Input() {
        return Input.__super__.constructor.apply(this, arguments)
      }
      Input.prototype.input = null;
      Input.prototype.errorMessage = '';
      Input.prototype.errorHtml = '<div class="error-container" if="{ errorMessage }">\n  <div class="error-message">{ errorMessage }</div>\n</div>';
      Input.prototype.beforeInit = function () {
        return this.html += this.errorHtml
      };
      Input.prototype.init = function () {
        return this.input.on('validate', function (_this) {
          return function (pRef) {
            return _this.validate(pRef)
          }
        }(this))
      };
      Input.prototype.getValue = function (event) {
        return event.target.value
      };
      Input.prototype.change = function (event) {
        var name, ref, ref1, value;
        ref1 = this.input, ref = ref1.ref, name = ref1.name;
        value = this.getValue(event);
        if (value === ref.get(name)) {
          return
        }
        this.input.ref.set(name, value);
        this.clearError();
        return this.validate()
      };
      Input.prototype.error = function (err) {
        var ref1;
        return this.errorMessage = (ref1 = err != null ? err.message : void 0) != null ? ref1 : err
      };
      Input.prototype.changed = function () {
      };
      Input.prototype.clearError = function () {
        return this.errorMessage = ''
      };
      Input.prototype.validate = function (pRef) {
        var p;
        p = this.input.validate(this.input.ref, this.input.name).then(function (_this) {
          return function (value) {
            _this.changed(value);
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.error(err);
            _this.update();
            throw err
          }
        }(this));
        if (pRef != null) {
          pRef.p = p
        }
        return p
      };
      return Input
    }(View);
    module.exports = Input  //# sourceMappingURL=input.js.map
  });
  // source: src/forms/config.coffee
  require.define('./forms/config', function (module, exports, __dirname, __filename) {
    var agreeToTerms, cardNumber, cvc, expiration, isEcardGiftRequired, isEmail, isPostalRequired, isRequired, ref, requiresStripe, splitName;
    ref = require('./forms/middleware'), isRequired = ref.isRequired, isEmail = ref.isEmail, splitName = ref.splitName, isPostalRequired = ref.isPostalRequired, requiresStripe = ref.requiresStripe, expiration = ref.expiration, cardNumber = ref.cardNumber, cvc = ref.cvc, isEcardGiftRequired = ref.isEcardGiftRequired, agreeToTerms = ref.agreeToTerms;
    module.exports = {
      'user.email': [
        isRequired,
        isEmail
      ],
      'user.name': [
        isRequired,
        splitName
      ],
      'user.password': null,
      'order.shippingAddress.line1': [isRequired],
      'order.shippingAddress.line2': null,
      'order.shippingAddress.city': [isRequired],
      'order.shippingAddress.state': [isRequired],
      'order.shippingAddress.postalCode': [isPostalRequired],
      'order.shippingAddress.country': [isRequired],
      'order.gift': null,
      'order.giftType': null,
      'order.giftEmail': [
        isEcardGiftRequired,
        isEmail
      ],
      'order.giftMessage': null,
      'order.promoCode': null,
      'payment.account.number': [
        requiresStripe,
        cardNumber
      ],
      'payment.account.expiry': [
        requiresStripe,
        expiration
      ],
      'payment.account.cvc': [
        requiresStripe,
        cvc
      ],
      'terms': [agreeToTerms]
    }
  });
  // source: src/forms/middleware.coffee
  require.define('./forms/middleware', function (module, exports, __dirname, __filename) {
    var Promise, countryUtils, emailRe;
    Promise = require('broken/lib');
    countryUtils = require('./utils/country');
    emailRe = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    module.exports = {
      isRequired: function (value) {
        if (value && value !== '') {
          return value
        }
        throw new Error('Required')
      },
      isEmail: function (value) {
        if (!value) {
          return value
        }
        if (emailRe.test(value)) {
          return value.toLowerCase()
        }
        throw new Error('Enter a valid email')
      },
      splitName: function (value) {
        var i;
        if (!value) {
          return value
        }
        i = value.indexOf(' ');
        this.set('user.firstName', value.slice(0, i));
        this.set('user.lastName', value.slice(i + 1));
        return value
      },
      isPostalRequired: function (value) {
        if (countryUtils.requiresPostalCode(this.get('order.shippingAddress.country') || '') && (value == null || value === '')) {
          throw new Error('Required for Selected Country')
        }
        return value
      },
      isEcardGiftRequired: function (value) {
        if (!this.get('order.gift') || this.get('order.giftType') !== 'ecard' || value && value !== '') {
          return value
        }
        throw new Error('Required')
      },
      requiresStripe: function (value) {
        if (this('order.type') === 'stripe' && (value == null || value === '')) {
          throw new Error('Required')
        }
        return value
      },
      requireTerms: function (value) {
        if (!value) {
          throw new Error('Please read and agree to the terms and conditions.')
        }
        return value
      },
      cardNumber: function (value) {
        if (!value) {
          return value
        }
        if (this('order.type') !== 'stripe') {
          return value
        }
        return new Promise(function (resolve, reject) {
          return requestAnimationFrame(function () {
            if ($('input[name=number]').hasClass('jp-card-invalid')) {
              reject(new Error('Enter a valid card number'))
            }
            return resolve(value)
          })
        })
      },
      expiration: function (value) {
        var base, base1, date;
        if (!value) {
          return value
        }
        if (this('order.type') !== 'stripe') {
          return value
        }
        date = value.split('/');
        if (date.length < 2) {
          throw new Error('Enter a valid expiration date')
        }
        this.set('payment.account.month', typeof (base = date[0]).trim === 'function' ? base.trim() : void 0);
        this.set('payment.account.year', ('' + new Date().getFullYear()).substr(0, 2) + (typeof (base1 = date[1]).trim === 'function' ? base1.trim() : void 0));
        return new Promise(function (resolve, reject) {
          return requestAnimationFrame(function () {
            if ($('input[name=expiry]').hasClass('jp-card-invalid')) {
              reject(new Error('Enter a valid expiration date'))
            }
            return resolve(value)
          })
        })
      },
      cvc: function (value) {
        if (!value) {
          return value
        }
        if (this('order.type') !== 'stripe') {
          return value
        }
        return new Promise(function (resolve, reject) {
          return requestAnimationFrame(function () {
            if ($('input[name=cvc]').hasClass('jp-card-invalid')) {
              reject(new Error('Enter a valid CVC number'))
            }
            return resolve(value)
          })
        })
      },
      agreeToTerms: function (value) {
        if (value === true) {
          return value
        }
        throw new Error('Agree to the terms and conditions')
      }
    }
  });
  // source: src/utils/country.coffee
  require.define('./utils/country', function (module, exports, __dirname, __filename) {
    module.exports = {
      requiresPostalCode: function (code) {
        code = code.toLowerCase();
        return code === 'dz' || code === 'ar' || code === 'am' || code === 'au' || code === 'at' || code === 'az' || code === 'a2' || code === 'bd' || code === 'by' || code === 'be' || code === 'ba' || code === 'br' || code === 'bn' || code === 'bg' || code === 'ca' || code === 'ic' || code === 'cn' || code === 'hr' || code === 'cy' || code === 'cz' || code === 'dk' || code === 'en' || code === 'ee' || code === 'fo' || code === 'fi' || code === 'fr' || code === 'ge' || code === 'de' || code === 'gr' || code === 'gl' || code === 'gu' || code === 'gg' || code === 'ho' || code === 'hu' || code === 'in' || code === 'id' || code === 'il' || code === 'it' || code === 'jp' || code === 'je' || code === 'kz' || code === 'kr' || code === 'ko' || code === 'kg' || code === 'lv' || code === 'li' || code === 'lt' || code === 'lu' || code === 'mk' || code === 'mg' || code === 'm3' || code === 'my' || code === 'mh' || code === 'mq' || code === 'yt' || code === 'mx' || code === 'mn' || code === 'me' || code === 'nl' || code === 'nz' || code === 'nb' || code === 'no' || code === 'pk' || code === 'ph' || code === 'pl' || code === 'po' || code === 'pt' || code === 'pr' || code === 're' || code === 'ru' || code === 'sa' || code === 'sf' || code === 'cs' || code === 'sg' || code === 'sk' || code === 'si' || code === 'za' || code === 'es' || code === 'lk' || code === 'nt' || code === 'sx' || code === 'uv' || code === 'vl' || code === 'se' || code === 'ch' || code === 'tw' || code === 'tj' || code === 'th' || code === 'tu' || code === 'tn' || code === 'tr' || code === 'tm' || code === 'vi' || code === 'ua' || code === 'gb' || code === 'us' || code === 'uy' || code === 'uz' || code === 'va' || code === 'vn' || code === 'wl' || code === 'ya'
      }
    }
  });
  // source: src/forms/cart.coffee
  require.define('./forms/cart', function (module, exports, __dirname, __filename) {
    var CartForm, CrowdControl, Events, m, riot, store, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = require('crowdcontrol/lib');
    riot = require('riot/riot');
    m = require('./mediator');
    Events = require('./events');
    store = require('store/store');
    module.exports = CartForm = function (superClass) {
      extend(CartForm, superClass);
      function CartForm() {
        return CartForm.__super__.constructor.apply(this, arguments)
      }
      CartForm.prototype.tag = 'cart';
      CartForm.prototype.html = '<lineitem each="{ item, v in data(\'order.items\') }" cartdata="{ this.parent.data }" data="{ this.parent.data.ref(\'order.items.\' + v) }" if="{ item.quantity > 0 }">\n</lineitem>\n<yield/>';
      CartForm.prototype.init = function () {
        var promoCode;
        CartForm.__super__.init.apply(this, arguments);
        promoCode = store.get('promoCode');
        if (promoCode) {
          this.data.set('order.promoCode', promoCode);
          this.applyPromoCode();
          return this.update()
        }
      };
      CartForm.prototype.configs = require('./forms/config');
      CartForm.prototype.renderCurrency = require('./utils/currency').renderUICurrencyFromJSON;
      CartForm.prototype.applying = false;
      CartForm.prototype.promoMessage = '';
      CartForm.prototype.applyPromoCode = function () {
        var promoCode;
        this.promoMessage = '';
        promoCode = this.data.get('order.promoCode');
        if (!promoCode) {
          return
        }
        store.set('promoCode', promoCode);
        this.promoMessage = 'Applying...';
        this.applying = true;
        promoCode = promoCode.toUpperCase();
        return this.client.coupon.get(promoCode).then(function (_this) {
          return function (coupon) {
            if (coupon.enabled) {
              _this.data.set('order.coupon', coupon);
              _this.data.set('order.couponCodes', [promoCode]);
              if (coupon.freeProductId !== '' && coupon.freeQuantity > 0) {
                _this.client.product.get(coupon.freeProductId).then(function (freeProduct) {
                  _this.applying = false;
                  _this.promoMessage = coupon.freeQuantity + ' Free ' + freeProduct.name;
                  _this.update();
                  return m.trigger(Events.UpdateItems)
                })['catch'](function (err) {
                  store.remove('promoCode');
                  _this.applying = false;
                  _this.update();
                  return void 0
                })
              } else {
                m.trigger(Events.UpdateItems);
                _this.applying = false;
                _this.promoMessage = promoCode + ' Applied!'
              }
            } else {
              store.remove('promoCode');
              _this.applying = false;
              _this.promoMessage = 'This code is expired.'
            }
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            store.remove('promoCode');
            _this.applying = false;
            _this.promoMessage = 'This code is invalid.';
            return _this.update()
          }
        }(this))
      };
      return CartForm
    }(CrowdControl.Views.Form)
  });
  // source: src/utils/currency.coffee
  require.define('./utils/currency', function (module, exports, __dirname, __filename) {
    var currencySeparator, currencySigns, digitsOnlyRe, isZeroDecimal;
    currencySigns = require('./data/currencies').data;
    currencySeparator = '.';
    digitsOnlyRe = new RegExp('[^\\d.-]', 'g');
    isZeroDecimal = function (code) {
      if (code === 'bif' || code === 'clp' || code === 'djf' || code === 'gnf' || code === 'jpy' || code === 'kmf' || code === 'krw' || code === 'mga' || code === 'pyg' || code === 'rwf' || code === 'vnd' || code === 'vuv' || code === 'xaf' || code === 'xof' || code === 'xpf') {
        return true
      }
      return false
    };
    module.exports = {
      renderUpdatedUICurrency: function (code, uiCurrency) {
        var currentCurrencySign;
        currentCurrencySign = currencySigns[code];
        return Util.renderUICurrencyFromJSON(Util.renderJSONCurrencyFromUI(uiCurrency))
      },
      renderUICurrencyFromJSON: function (code, jsonCurrency) {
        var currentCurrencySign;
        if (isNaN(jsonCurrency)) {
          jsonCurrency = 0
        }
        currentCurrencySign = currencySigns[code];
        jsonCurrency = '' + jsonCurrency;
        if (isZeroDecimal(code)) {
          return currentCurrencySign + jsonCurrency
        }
        while (jsonCurrency.length < 3) {
          jsonCurrency = '0' + jsonCurrency
        }
        return currentCurrencySign + jsonCurrency.substr(0, jsonCurrency.length - 2) + '.' + jsonCurrency.substr(-2)
      },
      renderJSONCurrencyFromUI: function (code, uiCurrency) {
        var currentCurrencySign, parts;
        currentCurrencySign = currencySigns[code];
        if (isZeroDecimal(code)) {
          return parseInt(('' + uiCurrency).replace(digitsOnlyRe, '').replace(currencySeparator, ''), 10)
        }
        parts = uiCurrency.split(currencySeparator);
        if (parts.length > 1) {
          parts[1] = parts[1].substr(0, 2);
          while (parts[1].length < 2) {
            parts[1] += '0'
          }
        } else {
          parts[1] = '00'
        }
        return parseInt(parseFloat(parts[0].replace(digitsOnlyRe, '')) * 100 + parseFloat(parts[1].replace(digitsOnlyRe, '')), 10)
      }
    }
  });
  // source: src/data/currencies.coffee
  require.define('./data/currencies', function (module, exports, __dirname, __filename) {
    module.exports = {
      data: {
        'aud': '$',
        'cad': '$',
        'eur': '€',
        'gbp': '£',
        'hkd': '$',
        'jpy': '¥',
        'nzd': '$',
        'sgd': '$',
        'usd': '$',
        'ghc': '¢',
        'ars': '$',
        'bsd': '$',
        'bbd': '$',
        'bmd': '$',
        'bnd': '$',
        'kyd': '$',
        'clp': '$',
        'cop': '$',
        'xcd': '$',
        'svc': '$',
        'fjd': '$',
        'gyd': '$',
        'lrd': '$',
        'mxn': '$',
        'nad': '$',
        'sbd': '$',
        'srd': '$',
        'tvd': '$',
        'bob': '$b',
        'uyu': '$u',
        'egp': '£',
        'fkp': '£',
        'gip': '£',
        'ggp': '£',
        'imp': '£',
        'jep': '£',
        'lbp': '£',
        'shp': '£',
        'syp': '£',
        'cny': '¥',
        'afn': '؋',
        'thb': '฿',
        'khr': '៛',
        'crc': '₡',
        'trl': '₤',
        'ngn': '₦',
        'kpw': '₩',
        'krw': '₩',
        'ils': '₪',
        'vnd': '₫',
        'lak': '₭',
        'mnt': '₮',
        'cup': '₱',
        'php': '₱',
        'uah': '₴',
        'mur': '₨',
        'npr': '₨',
        'pkr': '₨',
        'scr': '₨',
        'lkr': '₨',
        'irr': '﷼',
        'omr': '﷼',
        'qar': '﷼',
        'sar': '﷼',
        'yer': '﷼',
        'pab': 'b/.',
        'vef': 'bs',
        'bzd': 'bz$',
        'nio': 'c$',
        'chf': 'chf',
        'huf': 'ft',
        'awg': 'ƒ',
        'ang': 'ƒ',
        'pyg': 'gs',
        'jmd': 'j$',
        'czk': 'kč',
        'bam': 'km',
        'hrk': 'kn',
        'dkk': 'kr',
        'eek': 'kr',
        'isk': 'kr',
        'nok': 'kr',
        'sek': 'kr',
        'hnl': 'l',
        'ron': 'lei',
        'all': 'lek',
        'lvl': 'ls',
        'ltl': 'lt',
        'mzn': 'mt',
        'twd': 'nt$',
        'bwp': 'p',
        'byr': 'p.',
        'gtq': 'q',
        'zar': 'r',
        'brl': 'r$',
        'dop': 'rd$',
        'myr': 'rm',
        'idr': 'rp',
        'sos': 's',
        'pen': 's/.',
        'ttd': 'tt$',
        'zwd': 'z$',
        'pln': 'zł',
        'mkd': 'ден',
        'rsd': 'Дин.',
        'bgn': 'лв',
        'kzt': 'лв',
        'kgs': 'лв',
        'uzs': 'лв',
        'azn': 'ман',
        'rub': 'руб',
        'inr': '',
        'try': '',
        '': ''
      }
    }
  });
  // source: src/forms/lineitem.coffee
  require.define('./forms/lineitem', function (module, exports, __dirname, __filename) {
    var CrowdControl, Events, LineItemForm, m, riot, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = require('crowdcontrol/lib');
    riot = require('riot/riot');
    m = require('./mediator');
    Events = require('./events');
    module.exports = LineItemForm = function (superClass) {
      extend(LineItemForm, superClass);
      function LineItemForm() {
        return LineItemForm.__super__.constructor.apply(this, arguments)
      }
      LineItemForm.prototype.tag = 'lineitem';
      LineItemForm.prototype.html = require('./Users/zk/work/crowdstart/shop.js/templates/forms/lineitem');
      LineItemForm.prototype.configs = { 'quantity': null };
      LineItemForm.prototype.init = function () {
        return LineItemForm.__super__.init.apply(this, arguments)
      };
      LineItemForm.prototype.renderCurrency = require('./utils/currency').renderUICurrencyFromJSON;
      return LineItemForm
    }(CrowdControl.Views.Form)
  });
  // source: templates/forms/lineitem.jade
  require.define('./Users/zk/work/crowdstart/shop.js/templates/forms/lineitem', function (module, exports, __dirname, __filename) {
    module.exports = "<div if=\"{ !data.get('locked') }\"><quantity-select-control input=\"{ inputs.quantity }\"></quantity-select-control></div><div if=\"{ data.get('locked') }\" class=\"locked\">{ data.get('quantity') }</div><div>{ data.get('productName') }</div><div>{ renderCurrency(cartdata.get('order.currency'), data.get('price') * data.get('quantity')) }<div if=\"{ data.get('listPrice') &gt; data.get('price') }\">{ renderCurrency(cartdata.get('order.currency'), data.get('listPrice') * data.get('quantity')) }</div></div>"
  });
  // source: src/controls/index.coffee
  require.define('./controls', function (module, exports, __dirname, __filename) {
    module.exports = {
      Control: require('./controls/control'),
      Text: require('./controls/text'),
      TextArea: require('./controls/textarea'),
      Checkbox: require('./controls/checkbox'),
      Select: require('./controls/select'),
      QuantitySelect: require('./controls/quantity-select'),
      CountrySelect: require('./controls/country-select'),
      StateSelect: require('./controls/state-select'),
      UserEmail: require('./controls/user-email'),
      UserName: require('./controls/user-name'),
      ShippingAddressLine1: require('./controls/shippingaddress-line1'),
      ShippingAddressLine2: require('./controls/shippingaddress-line2'),
      ShippingAddressCity: require('./controls/shippingaddress-city'),
      ShippingAddressPostalCode: require('./controls/shippingaddress-postalcode'),
      ShippingAddressState: require('./controls/shippingaddress-state'),
      ShippingAddressCountry: require('./controls/shippingaddress-country'),
      CardNumber: require('./controls/card-number'),
      CardExpiry: require('./controls/card-expiry'),
      CardCVC: require('./controls/card-cvc'),
      Terms: require('./controls/terms'),
      GiftToggle: require('./controls/gift-toggle'),
      GiftType: require('./controls/gift-type'),
      GiftEmail: require('./controls/gift-email'),
      GiftMessage: require('./controls/gift-message'),
      PromoCode: require('./controls/promocode'),
      register: function () {
        this.Text.register();
        this.TextArea.register();
        this.Checkbox.register();
        this.Select.register();
        this.QuantitySelect.register();
        this.CountrySelect.register();
        this.StateSelect.register();
        this.UserEmail.register();
        this.UserName.register();
        this.ShippingAddressLine1.register();
        this.ShippingAddressLine2.register();
        this.ShippingAddressCity.register();
        this.ShippingAddressPostalCode.register();
        this.ShippingAddressState.register();
        this.ShippingAddressCountry.register();
        this.CardNumber.register();
        this.CardExpiry.register();
        this.CardCVC.register();
        this.Terms.register();
        this.GiftToggle.register();
        this.GiftType.register();
        this.GiftEmail.register();
        this.GiftMessage.register();
        return this.PromoCode.register()
      }
    }
  });
  // source: src/controls/control.coffee
  require.define('./controls/control', function (module, exports, __dirname, __filename) {
    var Control, CrowdControl, Events, m, riot, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = require('crowdcontrol/lib');
    m = require('./mediator');
    Events = require('./Events');
    riot = require('riot/riot');
    module.exports = Control = function (superClass) {
      extend(Control, superClass);
      function Control() {
        return Control.__super__.constructor.apply(this, arguments)
      }
      Control.prototype.lookup = 'user.email';
      Control.prototype.init = function () {
        if (this.input == null && this.inputs != null) {
          this.input = this.inputs[this.lookup]
        }
        if (this.input != null) {
          return Control.__super__.init.apply(this, arguments)
        }
      };
      Control.prototype.getValue = function (event) {
        var ref;
        return (ref = $(event.target).val()) != null ? ref.trim() : void 0
      };
      Control.prototype.error = function (err) {
        if (err instanceof DOMException) {
          void 0;
          return
        }
        Control.__super__.error.apply(this, arguments);
        return m.trigger(Events.ChangeFailed, this.input.name, this.input.ref.get(this.input.name))
      };
      Control.prototype.change = function () {
        Control.__super__.change.apply(this, arguments);
        return m.trigger(Events.Change, this.input.name, this.input.ref.get(this.input.name))
      };
      Control.prototype.changed = function (value) {
        m.trigger(Events.ChangeSuccess, this.input.name, value);
        return riot.update()
      };
      return Control
    }(CrowdControl.Views.Input)
  });
  // source: src/Events.coffee
  require.define('./Events', function (module, exports, __dirname, __filename) {
    module.exports = {
      SetData: 'set-data',
      UpdateItems: 'update-items',
      Ready: 'ready',
      Change: 'change',
      ChangeSuccess: 'change-success',
      ChangeFailed: 'change-failed',
      Submit: 'submit',
      SubmitSuccess: 'submit-success',
      SubmitFailed: 'submit-failed'
    }
  });
  // source: src/controls/text.coffee
  require.define('./controls/text', function (module, exports, __dirname, __filename) {
    var Control, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Control = require('./controls/control');
    module.exports = Text = function (superClass) {
      extend(Text, superClass);
      function Text() {
        return Text.__super__.constructor.apply(this, arguments)
      }
      Text.prototype.tag = 'text-control';
      Text.prototype.html = require('./Users/zk/work/crowdstart/shop.js/templates/controls/text');
      return Text
    }(Control)
  });
  // source: templates/controls/text.jade
  require.define('./Users/zk/work/crowdstart/shop.js/templates/controls/text', function (module, exports, __dirname, __filename) {
    module.exports = '<input id="{ input.name }" name="{ name || input.name }" type="text" onchange="{ change }" onblur="{ change }" value="{ input.ref(input.name) }" placeholder="{ placeholder }"/><yield></yield>'
  });
  // source: src/controls/textarea.coffee
  require.define('./controls/textarea', function (module, exports, __dirname, __filename) {
    var Control, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Control = require('./controls/control');
    module.exports = Text = function (superClass) {
      extend(Text, superClass);
      function Text() {
        return Text.__super__.constructor.apply(this, arguments)
      }
      Text.prototype.tag = 'textarea-control';
      Text.prototype.html = require('./Users/zk/work/crowdstart/shop.js/templates/controls/textarea');
      return Text
    }(Control)
  });
  // source: templates/controls/textarea.jade
  require.define('./Users/zk/work/crowdstart/shop.js/templates/controls/textarea', function (module, exports, __dirname, __filename) {
    module.exports = '<textarea id="{ input.name }" name="{ name || input.name }" rows="{ rows }" cols="{ cols }" type="text" onchange="{ change }" onblur="{ change }" placeholder="{ placeholder }">{ input.ref(input.name) }</textarea><yield></yield>'
  });
  // source: src/controls/checkbox.coffee
  require.define('./controls/checkbox', function (module, exports, __dirname, __filename) {
    var Checkbox, Control, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Control = require('./controls/control');
    module.exports = Checkbox = function (superClass) {
      extend(Checkbox, superClass);
      function Checkbox() {
        return Checkbox.__super__.constructor.apply(this, arguments)
      }
      Checkbox.prototype.tag = 'checkbox-control';
      Checkbox.prototype.html = require('./Users/zk/work/crowdstart/shop.js/templates/controls/checkbox');
      Checkbox.prototype.getValue = function (event) {
        return event.target.checked
      };
      return Checkbox
    }(Control)
  });
  // source: templates/controls/checkbox.jade
  require.define('./Users/zk/work/crowdstart/shop.js/templates/controls/checkbox', function (module, exports, __dirname, __filename) {
    module.exports = '<input id="{ input.name }" name="{ name || input.name }" type="checkbox" onchange="{ change }" onblur="{ change }" __selected="{ input.ref(input.name) }"/><yield></yield>'
  });
  // source: src/controls/select.coffee
  require.define('./controls/select', function (module, exports, __dirname, __filename) {
    var Control, Select, isABrokenBrowser, isObject, riot, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Control = require('./controls/control');
    riot = require('riot/riot');
    isObject = require('is-object');
    isABrokenBrowser = window.navigator.userAgent.indexOf('MSIE') > 0 || window.navigator.userAgent.indexOf('Trident') > 0;
    module.exports = Select = function (superClass) {
      extend(Select, superClass);
      function Select() {
        return Select.__super__.constructor.apply(this, arguments)
      }
      Select.prototype.tag = 'select-control';
      Select.prototype.html = require('./Users/zk/work/crowdstart/shop.js/templates/controls/select');
      Select.prototype.tags = false;
      Select.prototype.min = 10;
      Select.prototype.options = null;
      Select.prototype.readOnly = false;
      Select.prototype.ignore = false;
      Select.prototype.events = {
        updated: function () {
          return this.onUpdated()
        }
      };
      Select.prototype.getValue = function (event) {
        var ref;
        return (ref = $(event.target).val()) != null ? ref.trim().toLowerCase() : void 0
      };
      Select.prototype.change = function () {
        Select.__super__.change.apply(this, arguments);
        return riot.update()
      };
      Select.prototype.initSelect = function ($select) {
        var $input, invertedOptions, name, options, ref, value;
        options = [];
        invertedOptions = {};
        ref = this.options;
        for (value in ref) {
          name = ref[value];
          options.push({
            name: name,
            value: value
          });
          invertedOptions[name] = value
        }
        $select.selectize({
          dropdownParent: 'body',
          valueField: 'value',
          labelField: 'name',
          searchField: 'name',
          items: [this.input.ref.get(this.input.name)],
          options: options,
          sortField: 'text'
        }).on('change', function (_this) {
          return function (event) {
            return _this.change(event)
          }
        }(this));
        $input = $select.parent().find('.selectize-input input:first');
        $input.on('change', function (event) {
          var val;
          val = $(event.target).val();
          if (invertedOptions[val] != null) {
            return $select[0].selectize.setValue(invertedOptions[val])
          }
        });
        if (this.readOnly) {
          return $input.attr('readonly', true)
        }
      };
      Select.prototype.init = function (opts) {
        Select.__super__.init.apply(this, arguments);
        return this.style = this.style || 'width:100%'
      };
      Select.prototype.onUpdated = function () {
        var $select;
        if (this.input == null) {
          return
        }
        $select = $(this.root).find('select');
        if ($select[0] != null) {
          if (!this.initialized) {
            return requestAnimationFrame(function (_this) {
              return function () {
                _this.initSelect($select);
                return _this.initialized = true
              }
            }(this))
          }
        } else {
          return requestAnimationFrame(function (_this) {
            return function () {
              return _this.update()
            }
          }(this))
        }
      };
      return Select
    }(Control)
  });
  // source: node_modules/is-object/index.js
  require.define('is-object', function (module, exports, __dirname, __filename) {
    'use strict';
    module.exports = function isObject(x) {
      return typeof x === 'object' && x !== null
    }
  });
  // source: templates/controls/select.jade
  require.define('./Users/zk/work/crowdstart/shop.js/templates/controls/select', function (module, exports, __dirname, __filename) {
    module.exports = '<select id="{ input.name }" style="{ style }" name="{ name || input.name }" onchange="{ change }" onblur="{ change }" placeholder="{ placeholder }"></select><yield></yield>'
  });
  // source: src/controls/quantity-select.coffee
  require.define('./controls/quantity-select', function (module, exports, __dirname, __filename) {
    var QuantitySelect, Select, analytics, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Select = require('./controls/select');
    analytics = require('./utils/analytics');
    module.exports = QuantitySelect = function (superClass) {
      extend(QuantitySelect, superClass);
      function QuantitySelect() {
        return QuantitySelect.__super__.constructor.apply(this, arguments)
      }
      QuantitySelect.prototype.tag = 'quantity-select-control';
      QuantitySelect.prototype.options = {
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9
      };
      QuantitySelect.prototype.readOnly = true;
      QuantitySelect.prototype.getValue = function (event) {
        var ref;
        return parseFloat((ref = $(event.target).val()) != null ? ref.trim() : void 0)
      };
      QuantitySelect.prototype.change = function () {
        var deltaQuantity, newValue, oldValue;
        oldValue = this.data.get('quantity');
        QuantitySelect.__super__.change.apply(this, arguments);
        newValue = this.data.get('quantity');
        deltaQuantity = newValue - oldValue;
        if (deltaQuantity > 0) {
          return analytics.track('Added Product', {
            id: this.data.get('productId'),
            sku: this.data.get('productSlug'),
            name: this.data.get('productName'),
            quantity: deltaQuantity,
            price: parseFloat(this.data.get('price') / 100)
          })
        } else if (deltaQuantity < 0) {
          return analytics.track('Removed Product', {
            id: this.data.get('productId'),
            sku: this.data.get('productSlug'),
            name: this.data.get('productName'),
            quantity: deltaQuantity,
            price: parseFloat(this.data.get('price') / 100)
          })
        }
      };
      return QuantitySelect
    }(Select)
  });
  // source: src/controls/country-select.coffee
  require.define('./controls/country-select', function (module, exports, __dirname, __filename) {
    var CountrySelect, Select, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Select = require('./controls/select');
    module.exports = CountrySelect = function (superClass) {
      extend(CountrySelect, superClass);
      function CountrySelect() {
        return CountrySelect.__super__.constructor.apply(this, arguments)
      }
      CountrySelect.prototype.tag = 'country-select-control';
      CountrySelect.prototype.options = require('./data/countries').data;
      return CountrySelect
    }(Select)
  });
  // source: src/data/countries.coffee
  require.define('./data/countries', function (module, exports, __dirname, __filename) {
    module.exports = {
      data: {
        af: 'Afghanistan',
        ax: 'Åland Islands',
        al: 'Albania',
        dz: 'Algeria',
        as: 'American Samoa',
        ad: 'Andorra',
        ao: 'Angola',
        ai: 'Anguilla',
        aq: 'Antarctica',
        ag: 'Antigua and Barbuda',
        ar: 'Argentina',
        am: 'Armenia',
        aw: 'Aruba',
        au: 'Australia',
        at: 'Austria',
        az: 'Azerbaijan',
        bs: 'Bahamas',
        bh: 'Bahrain',
        bd: 'Bangladesh',
        bb: 'Barbados',
        by: 'Belarus',
        be: 'Belgium',
        bz: 'Belize',
        bj: 'Benin',
        bm: 'Bermuda',
        bt: 'Bhutan',
        bo: 'Bolivia',
        bq: 'Bonaire, Sint Eustatius and Saba',
        ba: 'Bosnia and Herzegovina',
        bw: 'Botswana',
        bv: 'Bouvet Island',
        br: 'Brazil',
        io: 'British Indian Ocean Territory',
        bn: 'Brunei Darussalam',
        bg: 'Bulgaria',
        bf: 'Burkina Faso',
        bi: 'Burundi',
        kh: 'Cambodia',
        cm: 'Cameroon',
        ca: 'Canada',
        cv: 'Cabo Verde',
        ky: 'Cayman Islands',
        cf: 'Central African Republic',
        td: 'Chad',
        cl: 'Chile',
        cn: 'China',
        cx: 'Christmas Island',
        cc: 'Cocos (Keeling) Islands',
        co: 'Colombia',
        km: 'Comoros',
        cg: 'Congo',
        cd: 'Congo (Democratic Republic)',
        ck: 'Cook Islands',
        cr: 'Costa Rica',
        ci: "Côte d'Ivoire",
        hr: 'Croatia',
        cu: 'Cuba',
        cw: 'Curaçao',
        cy: 'Cyprus',
        cz: 'Czech Republic',
        dk: 'Denmark',
        dj: 'Djibouti',
        dm: 'Dominica',
        'do': 'Dominican Republic',
        ec: 'Ecuador',
        eg: 'Egypt',
        sv: 'El Salvador',
        gq: 'Equatorial Guinea',
        er: 'Eritrea',
        ee: 'Estonia',
        et: 'Ethiopia',
        fk: 'Falkland Islands',
        fo: 'Faroe Islands',
        fj: 'Fiji',
        fi: 'Finland',
        fr: 'France',
        gf: 'French Guiana',
        pf: 'French Polynesia',
        tf: 'French Southern Territories',
        ga: 'Gabon',
        gm: 'Gambia',
        ge: 'Georgia',
        de: 'Germany',
        gh: 'Ghana',
        gi: 'Gibraltar',
        gr: 'Greece',
        gl: 'Greenland',
        gd: 'Grenada',
        gp: 'Guadeloupe',
        gu: 'Guam',
        gt: 'Guatemala',
        gg: 'Guernsey',
        gn: 'Guinea',
        gw: 'Guinea-Bissau',
        gy: 'Guyana',
        ht: 'Haiti',
        hm: 'Heard Island and McDonald Islands',
        va: 'Holy See',
        hn: 'Honduras',
        hk: 'Hong Kong',
        hu: 'Hungary',
        is: 'Iceland',
        'in': 'India',
        id: 'Indonesia',
        ir: 'Iran',
        iq: 'Iraq',
        ie: 'Ireland',
        im: 'Isle of Man',
        il: 'Israel',
        it: 'Italy',
        jm: 'Jamaica',
        jp: 'Japan',
        je: 'Jersey',
        jo: 'Jordan',
        kz: 'Kazakhstan',
        ke: 'Kenya',
        ki: 'Kiribati',
        kp: "Korea (Democratic People's Republic of)",
        kr: 'Korea (Republic of)',
        kw: 'Kuwait',
        kg: 'Kyrgyzstan',
        la: "Lao People's Democratic Republic",
        lv: 'Latvia',
        lb: 'Lebanon',
        ls: 'Lesotho',
        lr: 'Liberia',
        ly: 'Libya',
        li: 'Liechtenstein',
        lt: 'Lithuania',
        lu: 'Luxembourg',
        mo: 'Macao',
        mk: 'Macedonia',
        mg: 'Madagascar',
        mw: 'Malawi',
        my: 'Malaysia',
        mv: 'Maldives',
        ml: 'Mali',
        mt: 'Malta',
        mh: 'Marshall Islands',
        mq: 'Martinique',
        mr: 'Mauritania',
        mu: 'Mauritius',
        yt: 'Mayotte',
        mx: 'Mexico',
        fm: 'Micronesia',
        md: 'Moldova',
        mc: 'Monaco',
        mn: 'Mongolia',
        me: 'Montenegro',
        ms: 'Montserrat',
        ma: 'Morocco',
        mz: 'Mozambique',
        mm: 'Myanmar',
        na: 'Namibia',
        nr: 'Nauru',
        np: 'Nepal',
        nl: 'Netherlands',
        nc: 'New Caledonia',
        nz: 'New Zealand',
        ni: 'Nicaragua',
        ne: 'Niger',
        ng: 'Nigeria',
        nu: 'Niue',
        nf: 'Norfolk Island',
        mp: 'Northern Mariana Islands',
        no: 'Norway',
        om: 'Oman',
        pk: 'Pakistan',
        pw: 'Palau',
        ps: 'Palestine',
        pa: 'Panama',
        pg: 'Papua New Guinea',
        py: 'Paraguay',
        pe: 'Peru',
        ph: 'Philippines',
        pn: 'Pitcairn',
        pl: 'Poland',
        pt: 'Portugal',
        pr: 'Puerto Rico',
        qa: 'Qatar',
        re: 'Réunion',
        ro: 'Romania',
        ru: 'Russian Federation',
        rw: 'Rwanda',
        bl: 'Saint Barthélemy',
        sh: 'Saint Helena, Ascension and Tristan da Cunha',
        kn: 'Saint Kitts and Nevis',
        lc: 'Saint Lucia',
        mf: 'Saint Martin (French)',
        pm: 'Saint Pierre and Miquelon',
        vc: 'Saint Vincent and the Grenadines',
        ws: 'Samoa',
        sm: 'San Marino',
        st: 'Sao Tome and Principe',
        sa: 'Saudi Arabia',
        sn: 'Senegal',
        rs: 'Serbia',
        sc: 'Seychelles',
        sl: 'Sierra Leone',
        sg: 'Singapore',
        sx: 'Sint Maarten (Dutch)',
        sk: 'Slovakia',
        si: 'Slovenia',
        sb: 'Solomon Islands',
        so: 'Somalia',
        za: 'South Africa',
        gs: 'South Georgia and the South Sandwich Islands',
        ss: 'South Sudan',
        es: 'Spain',
        lk: 'Sri Lanka',
        sd: 'Sudan',
        sr: 'Suriname',
        sj: 'Svalbard and Jan Mayen',
        sz: 'Swaziland',
        se: 'Sweden',
        ch: 'Switzerland',
        sy: 'Syrian Arab Republic',
        tw: 'Taiwan',
        tj: 'Tajikistan',
        tz: 'Tanzania',
        th: 'Thailand',
        tl: 'Timor-Leste',
        tg: 'Togo',
        tk: 'Tokelau',
        to: 'Tonga',
        tt: 'Trinidad and Tobago',
        tn: 'Tunisia',
        tr: 'Turkey',
        tm: 'Turkmenistan',
        tc: 'Turks and Caicos Islands',
        tv: 'Tuvalu',
        ug: 'Uganda',
        ua: 'Ukraine',
        ae: 'United Arab Emirates',
        gb: 'United Kingdom of Great Britain and Northern Ireland',
        us: 'United States of America',
        um: 'United States Minor Outlying Islands',
        uy: 'Uruguay',
        uz: 'Uzbekistan',
        vu: 'Vanuatu',
        ve: 'Venezuela',
        vn: 'Viet Nam',
        vg: 'Virgin Islands (British)',
        vi: 'Virgin Islands (U.S.)',
        wf: 'Wallis and Futuna',
        eh: 'Western Sahara',
        ye: 'Yemen',
        zm: 'Zambia',
        zw: 'Zimbabwe'
      }
    }
  });
  // source: src/controls/state-select.coffee
  require.define('./controls/state-select', function (module, exports, __dirname, __filename) {
    var Select, StateSelect, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Select = require('./controls/select');
    module.exports = StateSelect = function (superClass) {
      extend(StateSelect, superClass);
      function StateSelect() {
        return StateSelect.__super__.constructor.apply(this, arguments)
      }
      StateSelect.prototype.tag = 'state-select-control';
      StateSelect.prototype.html = require('./Users/zk/work/crowdstart/shop.js/templates/controls/state-select');
      StateSelect.prototype.options = require('./data/states').data;
      StateSelect.prototype.countryField = 'order.shippingAddress.country';
      StateSelect.prototype.onUpdated = function () {
        var value;
        if (this.input == null) {
          return
        }
        if (this.input.ref(this.countryField) === 'us') {
          $(this.root).find('.select2').show()
        } else {
          $(this.root).find('.select2').hide();
          value = this.input.ref(this.input.name);
          if (value) {
            this.input.ref.set(this.input.name, value.toUpperCase())
          }
        }
        return StateSelect.__super__.onUpdated.apply(this, arguments)
      };
      return StateSelect
    }(Select)
  });
  // source: templates/controls/state-select.jade
  require.define('./Users/zk/work/crowdstart/shop.js/templates/controls/state-select', function (module, exports, __dirname, __filename) {
    module.exports = '<input if="{ input.ref(countryField) !== &quot;us&quot; }" id="{ input.name }" name="{ name || input.name }" type="text" onchange="{ change }" onblur="{ change }" value="{ input.ref(input.name) }" placeholder="{ placeholder }"/><select if="{ input.ref(countryField) == &quot;us&quot; }" id="{ input.name }" style="{ style }" name="{ name || input.name }" onchange="{ change }" onblur="{ change }" value="{ input.ref(input.name) }" data-placeholder="{ placeholder }"><option if="{ placeholder }"></option><option each="{ value, name in options }" value="{value}" __selected="{ this.parent.input.ref(input.name) == value }">{name}</option></select><yield></yield>'
  });
  // source: src/data/states.coffee
  require.define('./data/states', function (module, exports, __dirname, __filename) {
    module.exports = {
      data: {
        al: 'Alabama',
        ak: 'Alaska',
        az: 'Arizona',
        ar: 'Arkansas',
        ca: 'California',
        co: 'Colorado',
        ct: 'Connecticut',
        de: 'Delaware',
        dc: 'District of Columbia',
        fl: 'Florida',
        ga: 'Georgia',
        hi: 'Hawaii',
        id: 'Idaho',
        il: 'Illinois',
        'in': 'Indiana',
        ia: 'Iowa',
        ks: 'Kansas',
        ky: 'Kentucky',
        la: 'Louisiana',
        me: 'Maine',
        mt: 'Montana',
        ne: 'Nebraska',
        nv: 'Nevada',
        nh: 'New Hampshire',
        nj: 'New Jersey',
        nm: 'New Mexico',
        ny: 'New York',
        nc: 'North Carolina',
        nd: 'North Dakota',
        oh: 'Ohio',
        ok: 'Oklahoma',
        or: 'Oregon',
        md: 'Maryland',
        ma: 'Massachusetts',
        mi: 'Michigan',
        mn: 'Minnesota',
        ms: 'Mississippi',
        mo: 'Missouri',
        pa: 'Pennsylvania',
        ri: 'Rhode Island',
        sc: 'South Carolina',
        sd: 'South Dakota',
        tn: 'Tennessee',
        tx: 'Texas',
        ut: 'Utah',
        vt: 'Vermont',
        va: 'Virginia',
        wa: 'Washington',
        wv: 'West Virginia',
        wi: 'Wisconsin',
        wy: 'Wyoming',
        aa: 'U.S. Armed Forces – Americas',
        ae: 'U.S. Armed Forces – Europe',
        ap: 'U.S. Armed Forces – Pacific'
      }
    }
  });
  // source: src/controls/user-email.coffee
  require.define('./controls/user-email', function (module, exports, __dirname, __filename) {
    var Text, UserName, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = require('./controls/text');
    module.exports = UserName = function (superClass) {
      extend(UserName, superClass);
      function UserName() {
        return UserName.__super__.constructor.apply(this, arguments)
      }
      UserName.prototype.tag = 'user-name';
      UserName.prototype.lookup = 'user.name';
      return UserName
    }(Text)
  });
  // source: src/controls/user-name.coffee
  require.define('./controls/user-name', function (module, exports, __dirname, __filename) {
    var Text, UserEmail, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = require('./controls/text');
    module.exports = UserEmail = function (superClass) {
      extend(UserEmail, superClass);
      function UserEmail() {
        return UserEmail.__super__.constructor.apply(this, arguments)
      }
      UserEmail.prototype.tag = 'user-email';
      UserEmail.prototype.lookup = 'user.email';
      return UserEmail
    }(Text)
  });
  // source: src/controls/shippingaddress-line1.coffee
  require.define('./controls/shippingaddress-line1', function (module, exports, __dirname, __filename) {
    var ShippingAddressLine1, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = require('./controls/text');
    module.exports = ShippingAddressLine1 = function (superClass) {
      extend(ShippingAddressLine1, superClass);
      function ShippingAddressLine1() {
        return ShippingAddressLine1.__super__.constructor.apply(this, arguments)
      }
      ShippingAddressLine1.prototype.tag = 'shippingaddress-line1';
      ShippingAddressLine1.prototype.lookup = 'order.shippingAddress.line1';
      return ShippingAddressLine1
    }(Text)
  });
  // source: src/controls/shippingaddress-line2.coffee
  require.define('./controls/shippingaddress-line2', function (module, exports, __dirname, __filename) {
    var ShippingAddressLine2, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = require('./controls/text');
    module.exports = ShippingAddressLine2 = function (superClass) {
      extend(ShippingAddressLine2, superClass);
      function ShippingAddressLine2() {
        return ShippingAddressLine2.__super__.constructor.apply(this, arguments)
      }
      ShippingAddressLine2.prototype.tag = 'shippingaddress-line2';
      ShippingAddressLine2.prototype.lookup = 'order.shippingAddress.line2';
      return ShippingAddressLine2
    }(Text)
  });
  // source: src/controls/shippingaddress-city.coffee
  require.define('./controls/shippingaddress-city', function (module, exports, __dirname, __filename) {
    var ShippingAddressCity, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = require('./controls/text');
    module.exports = ShippingAddressCity = function (superClass) {
      extend(ShippingAddressCity, superClass);
      function ShippingAddressCity() {
        return ShippingAddressCity.__super__.constructor.apply(this, arguments)
      }
      ShippingAddressCity.prototype.tag = 'shippingaddress-city';
      ShippingAddressCity.prototype.lookup = 'order.shippingAddress.city';
      return ShippingAddressCity
    }(Text)
  });
  // source: src/controls/shippingaddress-postalcode.coffee
  require.define('./controls/shippingaddress-postalcode', function (module, exports, __dirname, __filename) {
    var ShippingAddressPostalCode, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = require('./controls/text');
    module.exports = ShippingAddressPostalCode = function (superClass) {
      extend(ShippingAddressPostalCode, superClass);
      function ShippingAddressPostalCode() {
        return ShippingAddressPostalCode.__super__.constructor.apply(this, arguments)
      }
      ShippingAddressPostalCode.prototype.tag = 'shippingaddress-postalcode';
      ShippingAddressPostalCode.prototype.lookup = 'order.shippingAddress.postalCode';
      return ShippingAddressPostalCode
    }(Text)
  });
  // source: src/controls/shippingaddress-state.coffee
  require.define('./controls/shippingaddress-state', function (module, exports, __dirname, __filename) {
    var ShippingAddressState, StateSelect, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    StateSelect = require('./controls/state-select');
    module.exports = ShippingAddressState = function (superClass) {
      extend(ShippingAddressState, superClass);
      function ShippingAddressState() {
        return ShippingAddressState.__super__.constructor.apply(this, arguments)
      }
      ShippingAddressState.prototype.tag = 'shippingaddress-state';
      ShippingAddressState.prototype.lookup = 'order.shippingAddress.state';
      return ShippingAddressState
    }(StateSelect)
  });
  // source: src/controls/shippingaddress-country.coffee
  require.define('./controls/shippingaddress-country', function (module, exports, __dirname, __filename) {
    var CountrySelect, ShippingAddressCountry, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CountrySelect = require('./controls/country-select');
    module.exports = ShippingAddressCountry = function (superClass) {
      extend(ShippingAddressCountry, superClass);
      function ShippingAddressCountry() {
        return ShippingAddressCountry.__super__.constructor.apply(this, arguments)
      }
      ShippingAddressCountry.prototype.tag = 'shippingaddress-country';
      ShippingAddressCountry.prototype.lookup = 'order.shippingAddress.country';
      return ShippingAddressCountry
    }(CountrySelect)
  });
  // source: src/controls/card-number.coffee
  require.define('./controls/card-number', function (module, exports, __dirname, __filename) {
    var CardNumber, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = require('./controls/text');
    module.exports = CardNumber = function (superClass) {
      extend(CardNumber, superClass);
      function CardNumber() {
        return CardNumber.__super__.constructor.apply(this, arguments)
      }
      CardNumber.prototype.tag = 'card-number';
      CardNumber.prototype.lookup = 'payment.account.number';
      return CardNumber
    }(Text)
  });
  // source: src/controls/card-expiry.coffee
  require.define('./controls/card-expiry', function (module, exports, __dirname, __filename) {
    var CardExpiry, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = require('./controls/text');
    module.exports = CardExpiry = function (superClass) {
      extend(CardExpiry, superClass);
      function CardExpiry() {
        return CardExpiry.__super__.constructor.apply(this, arguments)
      }
      CardExpiry.prototype.tag = 'card-expiry';
      CardExpiry.prototype.lookup = 'payment.account.expiry';
      return CardExpiry
    }(Text)
  });
  // source: src/controls/card-cvc.coffee
  require.define('./controls/card-cvc', function (module, exports, __dirname, __filename) {
    var CardCVC, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = require('./controls/text');
    module.exports = CardCVC = function (superClass) {
      extend(CardCVC, superClass);
      function CardCVC() {
        return CardCVC.__super__.constructor.apply(this, arguments)
      }
      CardCVC.prototype.tag = 'card-cvc';
      CardCVC.prototype.lookup = 'payment.account.cvc';
      return CardCVC
    }(Text)
  });
  // source: src/controls/terms.coffee
  require.define('./controls/terms', function (module, exports, __dirname, __filename) {
    var Checkbox, Terms, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Checkbox = require('./controls/checkbox');
    module.exports = Terms = function (superClass) {
      extend(Terms, superClass);
      function Terms() {
        return Terms.__super__.constructor.apply(this, arguments)
      }
      Terms.prototype.tag = 'terms';
      Terms.prototype.lookup = 'terms';
      return Terms
    }(Checkbox)
  });
  // source: src/controls/gift-toggle.coffee
  require.define('./controls/gift-toggle', function (module, exports, __dirname, __filename) {
    var Checkbox, GiftToggle, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Checkbox = require('./controls/checkbox');
    module.exports = GiftToggle = function (superClass) {
      extend(GiftToggle, superClass);
      function GiftToggle() {
        return GiftToggle.__super__.constructor.apply(this, arguments)
      }
      GiftToggle.prototype.tag = 'gift-toggle';
      GiftToggle.prototype.lookup = 'order.gift';
      return GiftToggle
    }(Checkbox)
  });
  // source: src/controls/gift-type.coffee
  require.define('./controls/gift-type', function (module, exports, __dirname, __filename) {
    var GiftType, Select, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Select = require('./controls/state-select');
    module.exports = GiftType = function (superClass) {
      extend(GiftType, superClass);
      function GiftType() {
        return GiftType.__super__.constructor.apply(this, arguments)
      }
      GiftType.prototype.tag = 'gift-type';
      GiftType.prototype.lookup = 'order.giftType';
      return GiftType
    }(Select)
  });
  // source: src/controls/gift-email.coffee
  require.define('./controls/gift-email', function (module, exports, __dirname, __filename) {
    var GiftEmail, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = require('./controls/text');
    module.exports = GiftEmail = function (superClass) {
      extend(GiftEmail, superClass);
      function GiftEmail() {
        return GiftEmail.__super__.constructor.apply(this, arguments)
      }
      GiftEmail.prototype.tag = 'gift-email';
      GiftEmail.prototype.lookup = 'order.giftEmail';
      return GiftEmail
    }(Text)
  });
  // source: src/controls/gift-message.coffee
  require.define('./controls/gift-message', function (module, exports, __dirname, __filename) {
    var GiftMessage, TextArea, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    TextArea = require('./controls/textarea');
    module.exports = GiftMessage = function (superClass) {
      extend(GiftMessage, superClass);
      function GiftMessage() {
        return GiftMessage.__super__.constructor.apply(this, arguments)
      }
      GiftMessage.prototype.tag = 'gift-message';
      GiftMessage.prototype.lookup = 'order.giftMessage';
      return GiftMessage
    }(TextArea)
  });
  // source: src/controls/promocode.coffee
  require.define('./controls/promocode', function (module, exports, __dirname, __filename) {
    var PromoCode, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = require('./controls/text');
    module.exports = PromoCode = function (superClass) {
      extend(PromoCode, superClass);
      function PromoCode() {
        return PromoCode.__super__.constructor.apply(this, arguments)
      }
      PromoCode.prototype.tag = 'promocode';
      PromoCode.prototype.lookup = 'order.promoCode';
      return PromoCode
    }(Text)
  });
  // source: src/cart.coffee
  require.define('./cart', function (module, exports, __dirname, __filename) {
    var Cart, Events, calculateInvoice, m, store;
    Cart = function () {
      function Cart() {
        riot.observable(this);
        this.items = []
      }
      Cart.prototype.add = function (item) {
        return this.items.push(item)
      };
      Cart.prototype.remove = function (item) {
        var _item, i, index, ref;
        ref = this.items;
        for (index = i = ref.length - 1; i >= 0; index = i += -1) {
          _item = ref[index];
          if (item.id === _item.id) {
            return this.items.splice(index, 1)
          }
        }
      };
      Cart.prototype.get = function () {
        var i, item, items, len, ref, subtotal;
        items = [];
        subtotal = 0;
        ref = this.items;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          items.push(items);
          subtotal += item.quantity * item.price
        }
        return {
          items: items,
          subtotal: subtotal
        }
      };
      return Cart
    }();
    module.exports = new Cart;
    m = require('./mediator');
    Events = require('./events');
    store = require('store/store');
    m.on(Events.SetData, function (data) {
      this.data = data;
      return calculateInvoice.call(this)
    });
    m.on(Events.UpdateItems, function () {
      return calculateInvoice.call(this)
    });
    m.on(Events.ChangeSuccess, function (key, value) {
      if (key.indexOf('quantity') >= 0 || key.indexOf('city') >= 0 || key.indexOf('state') >= 0 || key.indexOf('country') >= 0) {
        return calculateInvoice.call(this)
      }
    });
    calculateInvoice = function () {
      var city, country, coupon, discount, i, item, items, j, k, l, len, len1, len2, len3, len4, n, ref, ref1, ref2, ref3, ref4, ref5, shipping, shippingRate, state, subtotal, tax, taxRate, taxRateFilter;
      items = this.data.get('order.items');
      store.set('items', items);
      discount = 0;
      coupon = this.data.get('order.coupon');
      if (coupon != null) {
        switch (coupon.type) {
        case 'flat':
          if (coupon.productId == null || coupon.productId === '') {
            discount = coupon.amount || 0
          } else {
            ref = this.data.get('order.items');
            for (i = 0, len = ref.length; i < len; i++) {
              item = ref[i];
              if (item.productId === coupon.productId) {
                discount += (coupon.amount || 0) * item.quantity
              }
            }
          }
          break;
        case 'percent':
          if (coupon.productId == null || coupon.productId === '') {
            ref1 = this.data.get('order.items');
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              item = ref1[j];
              discount += (coupon.amount || 0) * item.price * item.quantity * 0.01
            }
          } else {
            ref2 = this.data.get('order.items');
            for (k = 0, len2 = ref2.length; k < len2; k++) {
              item = ref2[k];
              if (item.productId === coupon.productId) {
                discount += (coupon.amount || 0) * item.price * item.quantity * 0.01
              }
            }
          }
          discount = Math.floor(discount)
        }
      }
      this.data.set('order.discount', discount);
      items = this.data.get('order.items');
      subtotal = -discount;
      for (l = 0, len3 = items.length; l < len3; l++) {
        item = items[l];
        subtotal += item.price * item.quantity
      }
      this.data.set('order.subtotal', subtotal);
      ref3 = this.data.get('taxRates');
      for (n = 0, len4 = ref3.length; n < len4; n++) {
        taxRateFilter = ref3[n];
        city = this.data.get('order.shippingAddress.city');
        if (!city || taxRateFilter.city != null && taxRateFilter.city.toLowerCase() !== city.toLowerCase()) {
          continue
        }
        state = this.data.get('order.shippingAddress.state');
        if (!state || taxRateFilter.state != null && taxRateFilter.state.toLowerCase() !== state.toLowerCase()) {
          continue
        }
        country = this.data.get('order.shippingAddress.country');
        if (!country || taxRateFilter.country != null && taxRateFilter.country.toLowerCase() !== country.toLowerCase()) {
          continue
        }
        this.data.set('order.taxRate', taxRateFilter.taxRate);
        break
      }
      taxRate = (ref4 = this.data.get('order.taxRate')) != null ? ref4 : 0;
      tax = Math.ceil((taxRate != null ? taxRate : 0) * subtotal);
      shippingRate = (ref5 = this.data.get('order.shippingRate')) != null ? ref5 : 0;
      shipping = shippingRate;
      this.data.set('order.shipping', shipping);
      this.data.set('order.tax', tax);
      return this.data.set('order.total', subtotal + shipping + tax)
    }
  });
  // source: src/index.coffee
  require.define('./index', function (module, exports, __dirname, __filename) {
    var Crowdstart, Events, Promise, Shop, analytics, client, data, getReferrer, itemUpdateQueue, m, refer, reloadItem, riot, setItem, store, updateItem, waits;
    Promise = require('broken/lib');
    refer = require('referential/lib');
    riot = require('riot/riot');
    store = require('store/store');
    Crowdstart = require('crowdstart/lib/browser.js');
    m = require('./mediator');
    Events = require('./events');
    analytics = require('./utils/analytics');
    Shop = require('./shop');
    Shop.Forms = require('./forms');
    Shop.Controls = require('./controls');
    Shop.Cart = require('./cart');
    Shop.use = function (templates) {
      var ref, ref1;
      if (templates != null ? (ref = templates.Controls) != null ? ref.Error : void 0 : void 0) {
        Shop.Controls.Control.prototype.errorHtml = templates.Controls.Error
      }
      if (templates != null ? (ref1 = templates.Controls) != null ? ref1.Text : void 0 : void 0) {
        return Shop.Controls.Text.prototype.html = templates.Controls.Text
      }
    };
    client = null;
    data = null;
    Shop.analytics = analytics;
    Shop.isEmpty = function () {
      var items;
      items = data.get('order.items');
      return items.length === 0
    };
    getReferrer = function () {
      var match, q, qs, search;
      search = /([^&=]+)=?([^&]*)/g;
      q = window.location.href.split('?')[1];
      qs = {};
      if (q != null) {
        while (match = search.exec(q)) {
          qs[decodeURIComponent(match[1])] = decodeURIComponent(match[2])
        }
      }
      return qs.referrer
    };
    Shop.start = function (opts) {
      var d, item, items, j, k, len, len1, p, ps, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, referrer, tag, tags;
      if (opts == null) {
        opts = {}
      }
      if (opts.key == null) {
        throw new Error('Please specify your API Key')
      }
      Shop.Forms.register();
      Shop.Controls.register();
      referrer = (ref = getReferrer()) != null ? ref : (ref1 = opts.order) != null ? ref1.referrer : void 0;
      items = store.get('items');
      d = refer({
        taxRates: opts.taxRates || [],
        order: {
          giftType: 'physical',
          type: 'stripe',
          shippingRate: ((ref2 = opts.config) != null ? ref2.shippingRate : void 0) || ((ref3 = opts.order) != null ? ref3.shippingRate : void 0) || 0,
          taxRate: ((ref4 = opts.config) != null ? ref4.taxRate : void 0) || ((ref5 = opts.order) != null ? ref5.taxRate : void 0) || 0,
          currency: ((ref6 = opts.config) != null ? ref6.currency : void 0) || ((ref7 = opts.order) != null ? ref7.currency : void 0) || 'usd',
          referrerId: referrer,
          shippingAddress: { country: 'us' },
          discount: 0,
          tax: 0,
          subtotal: 0,
          total: 0,
          items: items != null ? items : []
        }
      });
      d.set(opts);
      client = new Crowdstart.Api({
        key: opts.key,
        endpoint: opts.endpoint
      });
      data = d;
      tags = riot.mount('*', {
        data: d,
        client: client
      });
      ps = [];
      for (j = 0, len = tags.length; j < len; j++) {
        tag = tags[j];
        p = new Promise(function (resolve) {
          return tag.one('updated', function () {
            return resolve()
          })
        });
        ps.push(p)
      }
      Promise.settle(ps).then(function () {
        return m.trigger(Events.Ready)
      });
      m.trigger(Events.SetData, d);
      m.on(Events.SubmitSuccess, function () {
        var i, item, k, len1, options, pixels, ref8;
        options = {
          orderId: data.get('order.id'),
          total: parseFloat(data.get('order.total') / 100),
          shipping: parseFloat(data.get('order.shipping') / 100),
          tax: parseFloat(data.get('order.tax') / 100),
          discount: parseFloat(data.get('order.discount') / 100),
          coupon: data.get('order.couponCodes.0') || '',
          currency: data.get('order.currency'),
          products: []
        };
        ref8 = data.get('order.items');
        for (i = k = 0, len1 = ref8.length; k < len1; i = ++k) {
          item = ref8[i];
          options.products[i] = {
            id: item.productId,
            sku: item.productSlug,
            name: item.productName,
            quantity: item.quantity,
            price: parseFloat(item.price / 100)
          }
        }
        analytics.track('Completed Order', options);
        pixels = data.get('analytics.pixels.checkout');
        if (pixels != null) {
          return analytics.track('checkout', pixels)
        }
      });
      if (items != null && items.length > 0) {
        for (k = 0, len1 = items.length; k < len1; k++) {
          item = items[k];
          if (item.id != null) {
            reloadItem(item.id)
          }
        }
      }
      riot.update();
      return m
    };
    waits = 0;
    itemUpdateQueue = [];
    Shop.setItem = function (id, quantity, locked) {
      if (locked == null) {
        locked = false
      }
      itemUpdateQueue.push([
        id,
        quantity,
        locked
      ]);
      if (itemUpdateQueue.length === 1) {
        return setItem()
      }
    };
    setItem = function () {
      var deltaQuantity, i, id, item, items, j, k, len, len1, locked, newValue, oldValue, quantity, ref;
      items = data.get('order.items');
      if (itemUpdateQueue.length === 0) {
        return
      }
      ref = itemUpdateQueue.shift(), id = ref[0], quantity = ref[1], locked = ref[2];
      if (quantity === 0) {
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          if (item.productId === id || item.productSlug === id || item.id === id) {
            break
          }
        }
        if (i < items.length) {
          items[i].quantity = 0;
          analytics.track('Removed Product', {
            id: item.productId,
            sku: item.productSlug,
            name: item.productName,
            quantity: item.quantity,
            price: parseFloat(item.price / 100)
          })
        }
        m.trigger(Events.UpdateItems);
        setItem();
        return
      }
      for (i = k = 0, len1 = items.length; k < len1; i = ++k) {
        item = items[i];
        if (item.productId !== id && item.productSlug !== id) {
          continue
        }
        item.quantity = quantity;
        item.locked = locked;
        oldValue = item.quantity;
        newValue = quantity;
        deltaQuantity = newValue - oldValue;
        if (deltaQuantity > 0) {
          analytics.track('Added Product', {
            id: item.productId,
            sku: item.productSlug,
            name: item.productName,
            quantity: deltaQuantity,
            price: parseFloat(item.price / 100)
          })
        } else if (deltaQuantity < 0) {
          analytics.track('Removed Product', {
            id: item.productId,
            sku: item.productSlug,
            name: item.productName,
            quantity: deltaQuantity,
            price: parseFloat(item.price / 100)
          })
        }
        m.trigger(Events.UpdateItems);
        setItem();
        return
      }
      items.push({
        id: id,
        quantity: quantity,
        locked: locked
      });
      waits++;
      return reloadItem(id)
    };
    reloadItem = function (id) {
      var items;
      items = data.get('order.items');
      return client.product.get(id).then(function (product) {
        var i, item, j, len;
        waits--;
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          if (product.id === item.id || product.slug === item.id) {
            analytics.track('Added Product', {
              id: product.id,
              sku: product.slug,
              name: product.name,
              quantity: item.quantity,
              price: parseFloat(product.price / 100)
            });
            updateItem(product, item);
            break
          }
        }
        return setItem()
      })['catch'](function (err) {
        waits--;
        void 0;
        return setItem()
      })
    };
    updateItem = function (product, item) {
      item.id = void 0;
      item.productId = product.id;
      item.productSlug = product.slug;
      item.productName = product.name;
      item.price = product.price;
      item.listPrice = product.listPrice;
      m.trigger(Events.UpdateItems);
      return riot.update()
    };
    module.exports = Crowdstart.Shop = Shop
  });
  require('./index')
}.call(this, this))//# sourceMappingURL=data:application/json;base64,